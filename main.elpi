type fixMe A -> B -> C.
type k_propId mttType -> mttTerm.

%%-- local definitions: letIn
%this may soon change as it is still to be decided how this should look like
type letIn mttType -> mttTerm -> (mttTerm -> mttTerm) -> mttTerm.



/* UNITYPED COMPUTATIONAL PREDICATES */
type hstep, dconv, hnf,  conv, interp A -> A -> prop. 
 
/*MTT PREDICATES*/
kind mttTerm,               mttType, mttKind, mttLevel type.
type ext, int               mttLevel.				%% intensional and extensional predicates
type col, set, propc, props mttKind.				%% types can be collections, sets, propositions
     	       	      	    					%% or small propositions   

%% encoding/decoding propositions
type encode mttType -> mttTerm.
type decode mttTerm -> mttType.
type propS  mttType.

%% adds a typed term to the context
type locDecl            mttTerm -> mttType -> prop.

%% given a type, returns its specific kind
type ofType             mttType -> mttKind -> mttLevel -> prop.

%% "of" computes the type of a term
%% "isa" checks if a term has type T, that is, if it is of some type T' such that T converts to T' (via conv)
type of, isa            mttTerm -> mttType -> mttLevel -> prop.

%% local definitions and type definitions
type locDef         mttTerm -> mttType -> mttTerm -> prop.
type locTypeDef     mttType -> mttKind -> mttType -> prop.

%% conversion to (weak) head-normal form WHNF
hnf A B :- (hstep A C), !, spy(hnf C B).
hnf A A.

%dstep A B :- spy(hstep A B).
%nf A B :- spy (dstep A C), !, spy(nf C B). %con le regole di eq dstep è diventata riflessiva, 
%nf A A.                         % ho aggiunto il not in eq.elpi per evitare che ciò accada

%% Expresses (extensional) equality between two types. Checks if they have the same WHNF, in which case
%% it calls itself recursively (via dconv) on all the subterms of the WHNF
conv A A :- ! .
conv A B :- (locDecl _ (propEq _ A B) ), !.
conv A B :- (locDecl _ (propEq _ B A) ), !.
conv A B :- spy(hnf A A'), spy( hnf B B'), spy( dconv A' B').

dconv A A :- !.

%% rules summarizing all different embeddings between the four kinds of types
pts_leq A A.
pts_leq props set.
pts_leq props col.
pts_leq props propc.
pts_leq set col.
pts_leq propc col.

%% determines kind of a proposition type
pts_prop props props props :- !.
pts_prop _ _ propc.

%% determines kind of a function type
pts_fun A B set :- spy(pts_leq A set), spy(pts_leq B set), !.
pts_fun _ _ col.

%% determines kind of a universal quantifier
pts_for A props props :- pts_leq A set, !.
pts_for _ _ propc. 

ofType A KIND _IE :- locTypeDef A KIND _.

isaType Type Kind IE 
    :- spy(ofType Type Kind' IE)
    ,  spy(pts_leq  Kind' Kind)
    .

isa Term TY IE 
    :- spy(of Term TY' IE)
    ,  spy(conv TY' TY)
    .


of X Y _ :-  locDecl X Y .

%% the universe of small propositions
ofType propS col _IE.
of (encode T) propS IE :- spy (ofType T props IE).
ofType (decode T) props IE :- spy (of T propS IE).
hstep (encode T) S :- hnf T (decode S).
hstep (decode T) S :- hnf T (encode S).
dconv (encode S1) (encode S2) :- conv S1 S2.
dconv (decode S1) (decode S2) :- conv S1 S2.

%% !!!DEBUG mock typing of term M, returns chosen type T
of (fixMe M T ) T int 
    :- !
    %,  print "|||||||||||||||||||||||||||||||||||||||||\n|||||||||||||||||||||||||||||||||||||||||\n"
    ,  print M
    ,  term_to_string T S, print S
    %,  print "|||||||||||||||||||||||||||||||||||||||||\n|||||||||||||||||||||||||||||||||||||||||\n"
    .

%%% !!!DEBUG mock type-checking of term M as a term of type T
isa (fixMe M T) T int 
    :- !
    %,  print "|||||||||||||||||||||||||||||||||||||||||\n|||||||||||||||||||||||||||||||||||||||||\n"
    ,  print M
    ,  term_to_string T S, print S
    %,  print "|||||||||||||||||||||||||||||||||||||||||\n|||||||||||||||||||||||||||||||||||||||||\n"
    .

%% Functions used in interpretation of extensionally equivalent (conv) types. These cover general/
%% degenerate cases, while the specific rules (for specific types) appear in their respective modules

%% returns method to generate a proof for the equality of a term to itself
proof_eq A A T H'
    :- nodebug => spy(interp_isa A T Ai)
    ,  nodebug => spy(setoid_refl T H)		% H is a proof of reflexivity for the translation of type T
    ,  nodebug => spy(H' = H Ai)                % then applying H to the translation of A proves it equal to itself
    .

%%  returns method to generate proof for the intensional equality, given a proof of the propositional one
proof_eq A B T Hi
    :- spy(locDecl H (propEq T_ A B))       %% given a proof of the propositional equality between A and B
    , !
    ,  spy(interp_isa H (propEq T A B) Hi)       %% the intensional one is its translation
    .
    
%% case with A and B inverted (using symetry in the translation of propEq over the translated of type T)
proof_eq A B T Hi
    :- nodebug => spy(locDecl H (propEq _T' B A))
    ,  !
    ,  nodebug => spy(interp_isa H (propEq T B A) Hi')
    ,  nodebug => spy (setoid_symm T Q)
    ,  nodebug => spy (interp_isa A T Ai)
    ,  nodebug => spy (interp_isa B T Bi)
    ,  nodebug => spy(Hi = Q Bi Ai Hi')
    .

%% tau A1 A2 F construct a function of one argument from the interpretation of A1 to the interpretation of A2, 
%%   the patter with the various predicated for the interpretation is that the input are 
%%   exstensional and the outputs are extensional.

%% constructing a function that, given int_terms of an int_type, returns int_terms of the same int_type (Identity!)
tau A A (x \ x) :- !.

tau_eq A A (x\y\h\ h) :- !.

tau_eq P1 P2 F
    :- ofType P1 K1 ext
    ,  ofType P2 K2 ext
    ,  pts_leq K1 propc
    ,  pts_leq K2 propc
    ,  conv P1 P2
    ,  F = (_\_\_\ id singleton star)
    .

proof_eq A1 A2 T H
    :- isa A1 T ext
    ,  isa A2 T ext
    ,  ofType T K ext
    ,  pts_leq K propc
    ,  H = id singleton star
    .

%interpret X:_ext T in un Xi di tipo Ti
interp_isa X T Xi 
        :- spy(of X T_inf ext)
        ,  spy(interp X Xi')
        ,  spy(tau T_inf T F)
        ,  spy(Xi = F Xi')
        .

%% implementare usando simmetria e transitività
locDecl (k_propId Te) (forall T t1\ forall T t1'\ 
        implies (E t1 t1') (forall T t2\ forall T t2'\ 
                implies (E t2 t2') (implies (E t1 t2) (E t1' t2'))) )
                :- interp Te T
                ,  setoid_eq Te E
                .


setoid_refl Prop (_\id singleton star) 
    :- spy(ofType Prop K ext), pts_leq K propc.
setoid_symm Prop (_\_\_\ id singleton star) 
    :- spy(ofType Prop K ext), pts_leq K propc.
setoid_tran Prop (_\_\_\_\_\ id singleton star) 
    :- spy(ofType Prop K ext), pts_leq K propc.
setoid_eq   Prop (_\_\ (propId singleton star star)) 
    :- spy(ofType Prop K ext), pts_leq K propc.

%setoid_refl T (x\ fixMe "prova di riflessivita'" (EquT x x) )
%    :- spy(setoid_eq T EquT)
%    .
%setoid_symm T (x\ y\ h\ fixMe "prova di symmetria" (EquT y x) )
%    :- spy(setoid_eq T EquT)
%    .

%TODO: this macro requires the predicate "tau" to be explicitly written as an argument, 
macro_tau B B' Q 
    :- spy(setoid_eq B EquB)
    ,  spy(interp B Bi)
    ,  spy(interp B' Bi')
    ,  spy(tau B' B FB) % This is needed to transport xi' in the domain of EquB
    ,  spy(pi x\ pi xi\ pi x'\ pi xi'\ pi h\ pi hi\ 
        locDecl x B 
        => locDecl x' B'
        => locDecl xi Bi
        => locDecl xi' Bi'
        => interp x xi
        => interp x' xi'
        => (locDecl h (propEq B x x')) 
        => (locDecl hi (EquB xi (FB xi')))
        => interp h hi
        => spy(Q x x' h xi xi' hi)
        ) 
    . 

%% macro_tau function for type constructors covariant in the argument B
macro_tau_cov_cov B B' Q 
    :- spy(setoid_eq B' EquB')
    ,  spy(interp B Bi)
    ,  spy(interp B' Bi')
    ,  spy(tau B B' FB)
    ,  spy(pi x\ pi xi\ pi x'\ pi xi'\ pi h\ pi hi\ 
        locDecl x B 
        => locDecl x' B'
        => locDecl xi Bi
        => locDecl xi' Bi'
        => interp x xi
        => interp x' xi'
        => (locDecl h (propEq B x x')) 
        => (locDecl hi (EquB' (FB xi) xi'))
        => interp h hi
        => spy(Q x x' h xi xi' hi)
        ) 
    . 
macro_Pi T Q :- interp T Ti, setoid_eq T EquT, spy(
    pi x1\ pi x2\ pi h\ pi x1i\ pi x2i\ pi hi\
        locDecl x1 T => locDecl x2 T => locDecl x1i Ti => locDecl x2i Ti =>
        interp x1 x1i => interp x2 x2i => 
        locDecl h (propEq T x1 x2) => locDecl hi (EquT x1i x2i) => interp h hi =>
        Q x1 x2 h x1i x2i hi
).

macro_interp B Q 
    :- spy(interp B Bi)
    ,  spy(pi x\ pi xi\ locDecl x B => locDecl xi Bi => interp x xi => (Q x xi B Bi)) 
    .


%%%%% Library Attempt %%%%%

locDecl X Y :- locDef X Y _.
hstep X Y :- locDef X _ Y.
hstep X Y :- locTypeDef X _ Y.

type process_library list libraryEntry -> prop -> prop.

process_library [] K :- K.
process_library [Entry|TL] K :-
   spy(process_entry Entry Hyp),
   spy(Hyp => process_library TL K).

type in_library prop -> prop.

type setoid mttType -> mttType.
type setoid_rel mttType -> mttTerm.
type setoidDep mttType -> (mttTerm -> mttType) -> mttType.
type setoidDepCarrier mttType -> (mttTerm -> mttType) -> mttTerm.
type setoidDepCast mttType -> (mttTerm -> mttType) -> mttTerm.
translateLib L1 :-
 L1 = [
   (univPi X \ locTypeDefL (setoid X) col (setPi X _ \ setPi X _ \ propS))
 , (univPi X \ locDefL (setoid_rel X) (setPi (setoid X) _ \ setPi X _ \ setPi X _ \ propS) (lambda (setoid X) R \ R))
 , (univPi B \ (univDepPi B C \ locTypeDefL (setoidDep B C) col (setPi (setoid B) bS \ setSigma (setPi B x\ setoid (C x)) _\
   	       		      		    	       	    	       (setPi B x1\ setPi B x2\
								       setPi (decode (app (app (app (setoid_rel B) bS) x1) x2)) _\
								       setPi (C x1) _ \ C x2))))					
 , (univPi B \ (univDepPi B C \ locDefL (setoidDepCarrier B C) (setPi (setoidDep B C) s \ setPi (setoid B) bS \ (setPi B x \ setoid (C x)))
   	       	   	      	(lambda (setoidDep B C) s \ lambda (setoid B) bS\   
		   	   	       elim_setSigma (app s bS) (_ \ (setPi B x \ setoid (C x))) (x\y\ x))))
, (univPi B \ (univDepPi B C \ locDefL (setoidDepCast B C)
  	      		       	       (setPi (setoidDep B C) s \ setPi (setoid B) bS \
   	       		       	       	  (setPi B x1\ setPi B x2\
					  	 setPi (decode (app (app (app (setoid_rel B) bS) x1) x2)) _\ setPi (C x1) _ \ C x2))
					(lambda (setoidDep B C) s\ lambda (setoid B) bS\
					   elim_setSigma (app s bS) (_\ (setPi B x1\ setPi B x2\
					      setPi (decode (app (app (app (setoid_rel B) bS) x1) x2)) _\
								      setPi (C x1) _ \ C x2))
								      (x\y\ y))))
 ].

type append list A -> list A -> list A -> prop.

append [] L L.
append [H|TL] L1 [H|TL2] :- append TL L1 TL2.

in_library P :-
 translateLib L1,
 singletonLib L2,
 setSigmaLib L3,
 append L1 L2 L4,
 append L4 L3 L5,
 process_library L5 P.

kind libraryEntry type.
type process_entry libraryEntry -> prop -> prop.
type locTypeDefL mttType -> mttKind -> mttType -> libraryEntry.
type locDefL   mttTerm -> mttType -> mttTerm -> libraryEntry.
type univPi    (mttType -> libraryEntry) -> libraryEntry.
type univDepPi mttType -> ((mttTerm -> mttType) -> libraryEntry) -> libraryEntry.

process_entry (locTypeDefL N KIND TY) Hyp :-
   spy(ofType TY KIND int),
   Hyp = locTypeDef N KIND TY.
process_entry (locDefL N TY TE) Hyp :-
   spy(isaType TY _ int),
   spy(isa TE TY int),
   Hyp = locDef N TY TE.
process_entry (univPi F) Hyp2 :-
   spy (pi Bi \ ofType Bi set int => spy (process_entry (F Bi) (Hyp Bi))),
   Hyp2 = (pi Bi \ Hyp Bi :- isaType Bi set int).
process_entry (univDepPi Bi F) Hyp2 :-
   spy (pi Ci \ (pi x \ ofType (Ci x) set int :- of x Bi int) =>
                (pi x \ pi y \ dconv (Ci x) (Ci y) :- conv x y) =>
                spy (process_entry (F Ci) (Hyp Ci))),
   Hyp2 = (pi Ci \ Hyp Ci :- (pi x \ (isaType (Ci x) set int :- of x Bi int))
                % ,(pi x \ pi y \ dconv (Ci x) (Ci y) :- conv x y)  % This should not be needed, right?
          ).
