type forall     mttType -> (mttTerm -> mttType) -> mttType.
type forall_lam mttType -> (mttTerm -> mttTerm) -> mttTerm.
type forall_app mttTerm -> mttTerm -> mttTerm.

ofType (forall B C) KIND IE 
    :- spy(ofType B KIND1 IE)
    ,  spy(pi x\ locDecl x B  => spy(ofType (C x) KIND2 IE))
    ,  spy(pts_for KIND1 KIND2 KIND)
    .

of (forall_lam B F) (forall B C) IE
    :- spy(pi x\ locDecl x B => of (F x) (C x) IE)
    ,  spy(ofType (forall B C) _ IE)
    .

of (forall_app Lam X) (CX) IE 
    :- spy(isa Lam (forall B C) IE)
    ,  spy(isa X B IE)
    ,  spy(CX = C X)
    .

hstep (forall_app LAM Bb) (F Bb) 
    :- hnf LAM (forall_lam _B F)
    .

dconv (forall B C) (forall B' C') 
    :- (conv B B')
    ,  (pi x\ locDecl x B => conv (C x) (C' x))
    .
dconv (forall_app F X) (forall_app F' X') :- (conv F F'), (conv X X').

interp (forall B C) (forall B' C') :-
        spy (interp B B'),
        spy (pi x\ pi x'\ interp x x' 
            => locDecl x B 
                => locDecl x' B' 
                    => spy(interp (C x )(C'  x')))
    .

interp (forall_app F X) (forall_app Fi Xi)
    :- interp F Fi
    ,  interp X Xi
    .

interp (forall_lam B F) (forall_lam Bi Fi)
    :- spy(interp B Bi)
    ,  spy(pi x\ pi xi\ (locDecl x B, locDecl xi Bi, interp x xi) => interp (F x) (Fi xi))
    .

tau (forall B C) (forall B' C') P
    :- % spy(interp (forall B C) (forall Bi_ Ci_))
    % ,
       spy(interp (forall B' C') (forall Bi' Ci'_))
    ,  spy(tau B' B FB)
    ,  spy(macro_tau B B'
        (x\x'\_\xi\xi'\hi\ tau (C x) (C' x') (FC' xi xi' hi)))
    ,  spy(setoid_refl B Hi)
    ,  spy(P = f\lambda Bi' x\ FC' (FB x) x (Hi (FB x)) (app f (FB x)))
    .


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                   ESTRAZIONE                                   %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

wrap_enlarged_sets_type (forall B C) Result
    :- ofType B KindB int
    ,  pi b\ locDecl b B => ofType (C b) KindC int
    ,  pts_for KindB KindC Kind
    ,  ((Kind = propc, KindB = set
        ,    WB = extractor_singleton)
        , !; WB = B)
    ,  spy(Result = (forall WB C))
    ,  !
    .

starify_nonset_ops_type (forall B C) Result
    :- wrap_enlarged_sets_type (forall B C) (forall WB C)
    ,  starify_nonset_ops_type WB B'
    ,  pi b\ locDecl b WB => starify_nonset_ops_type (C b) (C' b)
    ,  spy(Result = (forall B' C'))
    ,  !
    .

collapse_star_ops_type (forall B C) Result
    :- collapse_star_ops_type B B'
    ,  pi b\ locDecl b B => collapse_star_ops_type (C b) (C' b)
    ,  spy((B' = extractor_singleton, C' = (x\ extractor_singleton)
        ,    Result = extractor_singleton)
        , !; Result = (forall B' C'))
    ,  !
    .


wrap_enlarged_sets (forall_lam B F) Result
    :- ofType B KindB int
    ,  pi b\ locDecl b B => of (F b) (C b) int
    ,  pi b\ locDecl b B => ofType (C b) KindC int
    ,  pts_for KindB KindC Kind
    ,  ((Kind = propc, KindB = set
        ,    WB = extractor_singleton)
        , !; WB = B)
    ,  spy(Result = (forall_lam WB F))
    ,  !
    .

starify_nonset_ops (forall_lam B F) Result
    :- wrap_enlarged_sets (forall_lam B F) (forall_lam WB F)
    ,  starify_nonset_ops_type WB B'
    ,  pi b\ locDecl b WB => starify_nonset_ops (F b) (F' b)
    ,  spy(Result = (forall_lam B' F'))
    ,  !
    .

collapse_term (forall_lam extractor_singleton (x\extractor_star)) Result []
    :- Result = extractor_star
    ,  !
    .

extract_set_ops (forall_lam B F) Result SetList
    :- collapse_star_ops_type B B'
    ,  pi b\ locDecl b B => extract_set_ops (F b) (F' b) SetList
    ,  spy(collapse_term (forall_lam B' F') Result [])
    ,  !
    .


wrap_enlarged_sets (forall_app Lam X) Result
    :- of X B int
    ,  ofType B KindB int
    ,  isa Lam (forall B C) int
    ,  ofType (C X) KindC int
    ,  pts_for KindB KindC Kind
    ,  ((Kind = propc, KindB = set
        ,    WX = (app (lambda B (x\extractor_star)) X))
        , !; WX = X)
    ,  spy(Result = (forall_app Lam WX))
    ,  !
    .

starify_nonset_ops (forall_app Lam X) Result
    :- wrap_enlarged_sets (forall_app Lam X) (forall_app Lam WX)
    ,  starify_nonset_ops Lam Lam'
    ,  starify_nonset_ops WX X'
    ,  spy(Result = (forall_app Lam' X'))
    ,  !
    .

collapse_term (forall_app extractor_star extractor_star) Result []
    :- Result = extractor_star
    ,  !
    .

extract_set_ops (forall_app Lam X) Result SetList
    :- extract_set_ops Lam Lam' LamList
    ,  extract_set_ops X X' XList
    ,  spy(collapse_term (forall_app Lam' X') Result [])
    ,  concat [XList, LamList] SetList
    ,  !
    .

