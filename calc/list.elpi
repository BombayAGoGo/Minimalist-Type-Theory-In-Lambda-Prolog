%%-- list

type list mttType -> mttType.
type list_empty mttType -> mttTerm.
type list_cons mttType -> mttTerm -> mttTerm -> mttTerm.
type elim_list (mttTerm -> mttType) -> mttTerm -> mttTerm -> (mttTerm -> mttTerm -> mttTerm -> mttTerm) -> mttTerm.

ofType (list C) set IE
    :- ofType C Kind IE
    ,  pts_leq Kind set
    .

of (list_empty C) (list C) IE 
    :- ofType (list C) set IE
    .

of (list_cons C Head Tail) (list C) IE  
    :- ofType (list C) set IE
    ,  isa Head C IE
    ,  isa Tail (list C) IE
    .

of (elim_list L List LA LL) (L List) IE 
    :- spy(of List (list C) IE) 
    ,  spy(pi z\ locDecl z (list C) => ofType (L z) _ IE)
    ,  spy(isa LA (L (list_empty C)) IE)
    ,  spy(pi y\ locDecl y C => pi x\ locDecl x (list C) => pi z\ locDecl z (L x) => 
        isa (LL y x z) (L (list_cons C y x)) IE)  
    .


hstep (elim_list _L List LA _LL) (LA) 
    :- hnf List (list_empty _C)
    .

hstep (elim_list L List LA LL) (LL Head Tail (elim_list L Tail LA LL)) 
    :- hnf List (list_cons _C Head Tail)
    .


dconv (list C) (list C')
    :- conv C C'
    .

dconv (list_empty C) (list_empty C')
    :- conv C C'
    .

dconv (list_cons C Head Tail) (list_cons C' Head' Tail')
    :- conv C C'
    ,  conv Head Head'
    ,  conv Tail Tail'
    .

dconv (elim_list L List LA LL) (elim_list L' List' LA' LL') 
    :- conv List List'
    ,  isa List (list C) _
    ,  pi z\ locDecl z (list C) => conv (L z) (L' z)
    ,  conv LA LA'
    ,  pi y\ locDecl y C => pi x\ locDecl x (list C) => pi z\ locDecl z (L x) => 
        conv (LL y x z) (LL' y x z)
    .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                   ESTRAZIONE                                   %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

starify_nonset_ops_type (list C) LibMap Result
    :- starify_nonset_ops_type C LibMap C'
    ,  Result = (list C')
    ,  !
    .

starify_nonset_ops (list_empty C) LibMap Result
    :- starify_nonset_ops_type C LibMap C'
    ,  Result = (list_empty C')
    ,  !
    .

starify_nonset_ops (list_cons C Head Tail) LibMap Result
    :- starify_nonset_ops_type C LibMap C'
    ,  starify_nonset_ops Head LibMap Head'
    ,  starify_nonset_ops Tail LibMap Tail'
    ,  Result = (list_cons C' Head' Tail')
    ,  !
    .

starify_nonset_ops (elim_list L List LA LL) LibMap Result
    :- starify_nonset_ops List LibMap List'
    ,  isa List (list C) @level
    , ((name L, L' = L)
        , !; pi z\ locDecl z (list C) => starify_nonset_ops_type (L z) LibMap (L' z))
    ,  spy(starify_nonset_ops LA LibMap LA')
    ,  ((pi y\ locDecl y C => pi x\ locDecl x (list C) => (name (LL y x), LL' = LL))
        , !; pi y\ locDecl y C => pi x\ locDecl x (list C) => pi z\ locDecl z (L x) => 
            starify_nonset_ops (LL y x z) LibMap (LL' y x z))
    ,  Result = (elim_list L' List' LA' LL')
    ,  !
    .


extract_set_ops_type (list C) Result Vars VarMap LibMap SetList
    :- extract_set_ops_type C C' Vars VarMap LibMap SetList
    ,  collapse_type (list C') Result Vars VarMap LibMap []
    ,  !
    .

extract_set_ops (list_empty C) Result Vars VarMap LibMap SetList
    :- spy(extract_set_ops_type C C' Vars VarMap LibMap SetList)
    ,  spy(collapse_term (list_empty C') Result Vars VarMap LibMap [])
    ,  !
    .

extract_set_ops (list_cons C Head Tail) Result Vars VarMap LibMap SetList
    :- spy(extract_set_ops_type C C' Vars VarMap LibMap CList)
    ,  spy(extract_set_ops Head Head' Vars VarMap LibMap HeadList)
    ,  spy(extract_set_ops Tail Tail' Vars VarMap LibMap TailList)
    ,  concat [TailList, HeadList, CList] SetList
    ,  spy(collapse_term (list_cons C' Head' Tail') Result Vars VarMap LibMap [])
    ,  !
    .

%% N -> 1  ==>  1
collapse_term (elim_list L List _LA _LL) Result Vars VarMap LibMap ElimList
    :- conv (L List) extractor_singleton
    ,  extract_collapsing_input Vars VarMap LibMap List _ ElimList
    ,  Result = extractor_star
    ,  !
    .

extract_set_ops (elim_list L List LA LL) Result Vars VarMap LibMap SetList
    :- extract_set_ops List List' Vars VarMap LibMap ListList
    ,  isa List (list C) @level
    ,  isa List' (list C') @level
    , ((name L, map_var L VarMap L', LList = [])
        , !; pi z\ locDecl z (list C) => pi s\ locDecl s (list C') => 
            extract_set_ops_type (L z) (L' s) [(var_term _ s)|[(var_term _ z)|Vars]] (var_chain z s VarMap) LibMap LList)
    ,  spy(extract_set_ops LA LA' Vars VarMap LibMap LAList)
    ,  ((pi y\ locDecl y C => pi x\ locDecl x (list C) =>
         pi b\ locDecl b C' => pi a\ locDecl a (list C') =>
            (name (LL y x), map_var (LL y x) VarMap (LL' b a), LLList = []))
        , !; pi y\ locDecl y C => pi x\ locDecl x (list C) => pi z\ locDecl z (L x) => 
             pi b\ locDecl b C' => pi a\ locDecl a (list C') => pi c\ locDecl c (L' a) =>
            extract_set_ops (LL y x z) (LL' b a c) [(var_term _ z)|[(var_term _ x)|[(var_term _ y)|[(var_term _ c)|[(var_term _ a)|[(var_term _ b)|Vars]]]]]] (var_chain z c (var_chain x a (var_chain y b VarMap))) LibMap LLList)
    ,  spy(collapse_term (elim_list L' List' LA' LL') Result Vars VarMap LibMap ElimList)
    ,  spy(concat [ElimList, LLList, LAList, LList, ListList] SetList)
    ,  !
    .

