%% calc_Eq.elpi


type propEq mttType -> mttTerm -> mttTerm -> mttType.
type eq   mttType -> mttTerm -> mttTerm.

ofType (propEq A AA1 AA2) KIND ext
    :- spy(ofType A KIND' ext)
    ,  spy(pts_eq KIND' KIND)
    ,  spy(isa AA1 A ext)
    ,  spy(isa AA2 A ext)
    .


of (eq C Cc) (propEq C Cc Cc) ext
    :-  spy(of Cc C ext)
    .



%dstep A B :- of _ ()

dconv (propEq A AA1 AA2) (propEq A' AA1' AA2') :- spy(conv A A'), spy(conv AA1 AA1'), spy (conv AA2 AA2').

dconv (eq A AA) (eq A' AA') :- conv A A', conv AA AA'.


interp (propEq A Aa1 Aa2) R 
    :- spy(setoid_eq A EquA)
    ,  spy(interp_isa Aa1 A Aa1i')
    ,  spy(interp_isa Aa2 A Aa2i')
    ,  spy(R = (EquA Aa1i' Aa2i'))
    .

interp (eq  A Aa)  T
    :- spy(setoid_refl A ReflA)
    ,  spy(interp Aa Aa')
    ,  T = (ReflA Aa') 
    .
tau (propEq T_ T1 T2) (propEq T T1' T2') (F)
    :- spy(conv T_ T)
    ,  spy(proof_eq T1 T1' T F1)
    ,  spy(proof_eq T2 T2' T F2)
    ,  spy(interp_isa T1 T T1i)
    ,  spy(interp_isa T2 T T2i)
    ,  spy(interp_isa T1' T T1i')
    ,  spy(interp_isa T2' T T2i')
    ,  spy(interp T Ti)
    ,  spy(F = x\ impl_app ( 
                impl_app ( 
                 forall_app ( 
                  forall_app ( 
                   impl_app ( 
                    forall_app ( 
                     forall_app (k_propId Ti) T1i) T1i') F1) T2i) T2i') F2) x
        )
    .

tau_eq (propEq _ _ _ ) (propEq _ _ _) (h\h'\k\ k).



proof_eq  _ _ (propEq _T _A _B) (id singleton star).


/* NEW INTERPRETATION AND LIBRARY */
type propEqLib list libraryEntry -> prop.
type propEq_trasp mttType -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> (mttTerm -> mttTerm) ->
     (mttTerm -> mttTerm) -> mttTerm -> mttType.
type propEq_setoidDep mttType -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> (mttTerm -> mttTerm) ->
     (mttTerm -> mttTerm) -> mttTerm.
type dep_eq mttType -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> mttTerm -> (mttTerm -> mttTerm) ->
     (mttTerm -> mttTerm) -> mttType.


new_interp_type (propEq A Aa1 Aa2) O :-
  spy(interp A Ai),
  new_interp_type A As,
     % Aa1 and Aa2 should be both of ext type A
  spy(interp_isa Aa1 A Aa1i),
  spy(interp_isa Aa2 A Aa2i),
  O = (prop_setoid (decode (app (app (app (setoid_rel Ai) As) Aa1i) Aa2i))).

new_interp_dep_type A (a\ (propEq (B a) (Bb1 a) (Bb2 a))) O :-
  spy(interp A Ai),
  macro_interp A (a\ai\_\_\ interp (B a) (Bi ai)),
  macro_interp A (a\ai\_\_\ (interp_isa (Bb1 a) (B a) (Bb1i ai), interp_isa (Bb2 a) (B a) (Bb2i ai))),
  new_interp_type A As,
  new_interp_dep_type A B Bs,
  O = (propEq_setoidDep Ai Bi As Bs Bb1i Bb2i).
  %% Bb1i and Bb2i declarations with univPiT would require to know an element ai of Ai
  %% possibly need a new abstraction mechanism for terms of dependent types (univDepPiT)


propEqLib L :- L = [

 (univPi Ai\
  univDepPi Ai Bi\
   univPiT (setoid Ai) aS\
   univPiT (setoidDep Ai Bi aS) bS\
   univDepPiT Ai Bi b1\
   univDepPiT Ai Bi b2\
   univPiT (setSigma (setPi Ai x\ setoid (decode (app (app (app (setoid_rel (Bi x))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x)))) _\
	       (setPi Ai x1\ setPi Ai x2\
	         setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		  setPi (decode (app (app (app (setoid_rel (Bi x1))
		   		     (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) _\
		    (decode (app (app (app (setoid_rel (Bi x2))
		 	       	 (app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2))))) cc\
   (locTypeDefL (propEq_trasp Ai Bi aS bS b1 b2 cc) col
   		(setPi Ai x1\ setPi Ai x2\
            setPi (decode (app (app (app (setoid_rel (Bi x1))
		 	       (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) y1\
	     setPi (decode (app (app (app (setoid_rel (Bi x1))
		 	       	(app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) y2\
              setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
	      setPi (decode (app (app (app (setoid_rel (decode (app (app (app (setoid_rel (Bi x1))
		 	       	 (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))))
		      	    	 (app (elim_setSigma cc (_\ (setPi Ai x\ setoid (decode (app (app (app (setoid_rel (Bi x))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x))))) (x\y\x)) x1)) y1) y2)) d2\
	       (decode (app (app (app (setoid_rel ((decode (app (app (app (setoid_rel (Bi x2))
		 	    (app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2)))))
		       	    (app (elim_setSigma cc (_\ (setPi Ai x\ setoid (decode (app (app (app (setoid_rel (Bi x))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x))))) (x\y\x)) x2))
			    (app (app (app (app (elim_setSigma cc
							       (_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
								   setPi (decode (app (app (app (setoid_rel (Bi x1))
				   (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) _\
				   (decode (app (app (app (setoid_rel (Bi x2))
				   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2)))))
							       (x\y\y)) x1) x2) d1) y1))
			    (app (app (app (app (elim_setSigma cc
							       (_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
								   setPi (decode (app (app (app (setoid_rel (Bi x1))
				   (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) _\
				   (decode (app (app (app (setoid_rel (Bi x2))
				   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2)))))
							       (x\y\y)) x1) x2) d1) y2)))))),

 (univPi Ai\
   univDepPi Ai Bi\
    univPiT (setoid Ai) aS\
     univPiT (setoidDep Ai Bi aS) bS\
      univPiT Ai x\
       univDepPiT Ai Bi b1\
        univDepPiT Ai Bi b2\
	 locTypeDefL (dep_eq Ai Bi aS bS x b1 b2) props
	 	     (decode (app (app (app (setoid_rel (Bi x)) (app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x)))),
       
 (univPi Ai\
   univDepPi Ai Bi\
    univPiT (setoid Ai) aS\
     univPiT (setoidDep Ai Bi aS) bS\
      univDepPiT Ai Bi b1\
       univDepPiT Ai Bi b2\
        (locDefL (propEq_setoidDep Ai Bi aS bS b1 b2)
		 (setoidDep Ai (a\ (decode (app (app (app (setoid_rel (Bi a))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) a)) (b1 a)) (b2 a)))) aS)
		 (pair (setSigma (setPi Ai x\ setoid (decode (app (app (app (setoid_rel (Bi x))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x)))) _\
	       (setPi Ai x1\ setPi Ai x2\
	         setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		  setPi (decode (app (app (app (setoid_rel (Bi x1))
		   		     (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) _\
		    (decode (app (app (app (setoid_rel (Bi x2))
		 	       	 (app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2)))))

     (cc\ (propEq_trasp Ai Bi aS bS b1 b2 cc))
     (pair (setPi Ai x\ setoid (decode (app (app (app (setoid_rel (Bi x))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x))))
	   (_\ (setPi Ai x1\ setPi Ai x2\
	         setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		  setPi (decode (app (app (app (setoid_rel (Bi x1))
		   		     (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) _\
		    (decode (app (app (app (setoid_rel (Bi x2))
		 	       	 (app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2)))))
	   (lambda Ai x \ (prop_setoid (decode (app (app (app (setoid_rel (Bi x))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x)))))
	   (lambda Ai x1\ lambda Ai x2\
	     lambda (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d\
	      lambda (decode (app (app (app (setoid_rel (Bi x1))
		   		     (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) p\
	       (fixMe "cast" (decode (app (app (app (setoid_rel (Bi x2))
		 	       	 (app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2))))))
     %% Sostituire il cc appropriato
     (fixMe "proof_trasp"
       (propEq_trasp Ai Bi aS bS b1 b2
       		     (pair (setPi Ai x\ setoid (decode (app (app (app (setoid_rel (Bi x))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x))))
	   (_\ (setPi Ai x1\ setPi Ai x2\
	         setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		  setPi (decode (app (app (app (setoid_rel (Bi x1))
		   		     (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) _\
		    (decode (app (app (app (setoid_rel (Bi x2))
		 	       	 (app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2)))))
	   (lambda Ai x \ (prop_setoid (decode (app (app (app (setoid_rel (Bi x))
		 	       	   	   	(app (app (setoidDepCarrier Ai Bi aS) bS) x)) (b1 x)) (b2 x)))))
	   (lambda Ai x1\ lambda Ai x2\
	     lambda (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d\
	      lambda (decode (app (app (app (setoid_rel (Bi x1))
		   		     (app (app (setoidDepCarrier Ai Bi aS) bS) x1)) (b1 x1)) (b2 x1))) p\
	       (fixMe "cast" (decode (app (app (app (setoid_rel (Bi x2))
		 	       	 (app (app (setoidDepCarrier Ai Bi aS) bS) x2)) (b1 x2)) (b2 x2))))))))))
   )].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                   ESTRAZIONE                                   %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

starify_nonset_ops_type (propEq A AA1 AA2) LibMap Result
    :- starify_nonset_ops AA1 LibMap AA1'
    ,  starify_nonset_ops AA2 LibMap AA2'
    ,  starify_nonset_ops_type A LibMap A'
    ,  spy(Result = (propEq A' AA1' AA2'))
    ,  !
    .

starify_nonset_ops (eq A AA) LibMap Result
    :- starify_nonset_ops AA LibMap AA'
    ,  starify_nonset_ops_type A LibMap A'
    ,  spy(Result = (eq A' AA'))
    ,  !
    .


collapse_type (propEq A _AA1 _AA2) Result _Vars _VarMap _LibMap []
    :- conv A extractor_singleton
    ,  Result = extractor_singleton
    ,  !
    .

extract_set_ops_type (propEq A AA1 AA2) Result Vars VarMap LibMap SetList
    :- extract_set_ops AA1 AA11 Vars VarMap LibMap AA1List
    ,  extract_set_ops AA2 AA21 Vars VarMap LibMap AA2List
    ,  extract_set_ops_type A A1 Vars VarMap LibMap AList
    ,  extract_collapsing_input Vars VarMap LibMap AA11 AA1' AA11List
    ,  extract_collapsing_input Vars VarMap LibMap AA21 AA2' AA21List
    ,  spy((AA1' = extractor_star, AA2' = extractor_star
        ,    A' = extractor_singleton)
        , !; A' = A1)
    ,  spy(concat [AA21List, AA11List, AA2List, AA1List, AList] SetList)
    ,  spy(collapse_type (propEq A' AA1' AA2') Result Vars VarMap LibMap [])
    ,  !
    .

%% C 1  ==>  1
collapse_term (eq A _AA) Result _Vars _VarMap _LibMap []
    :- conv A extractor_singleton
    ,  Result = extractor_star
    ,  !
    .

%% A' -> C A'  ==>  A' -> C 1
extract_set_ops (eq A AA) Result Vars VarMap LibMap SetList
    :- spy(extract_set_ops_type A A1 Vars VarMap LibMap AList)
    ,  spy(extract_set_ops AA AA1 Vars VarMap LibMap AAList)
    ,  spy(extract_collapsing_input Vars VarMap LibMap AA1 AA' AA1List)
    ,  spy((AA' = extractor_star
        ,    A' = extractor_singleton)
        , !; A' = A1)
    ,  spy(concat [AA1List, AAList, AList] SetList)
    ,  spy(collapse_term (eq A' AA') Result Vars VarMap LibMap [])
    ,  !
    .

