
%% calc_Eq.elpi


type propEq mttType -> mttTerm -> mttTerm -> mttType.
type eq   mttType -> mttTerm -> mttTerm.

ofType (propEq A AA1 AA2) KIND IE
    :- print "|||||||||||||||||DEBUG|||||||||||||||",
       spy(ofType A KIND' IE)
    ,  spy(pts_eq  KIND' KIND)
    ,  spy(isa AA1 A IE)
    ,  spy(isa AA2 A IE)
    .


of (eq C Cc) (propEq C Cc Cc) ext
    :-  spy(of Cc C ext)
    .



%dstep A B :- of _ ()

dconv (propEq A AA1 AA2) (propEq A' AA1' AA2') :- spy(conv A A'), spy(conv AA1 AA1'), spy (conv AA2 AA2').

dconv (eq A AA) (eq A' AA') :- conv A A', conv AA AA'.


interp (propEq A Aa1 Aa2) R 
    :- spy(setoid_eq A EquA)
    ,  spy(interp_isa Aa1 A Aa1i')
    ,  spy(interp_isa Aa2 A Aa2i')
    ,  spy(R = (EquA Aa1i' Aa2i'))
    .

interp (eq  A Aa)  T
    :- spy(setoid_refl A ReflA)
    ,  spy(interp Aa Aa')
    ,  T = (ReflA Aa') 
    .
tau (propEq T_ T1 T2) (propEq T T1' T2') (F)
    :- spy(conv T_ T)
    ,  spy(proof_eq T1 T1' T F1)
    ,  spy(proof_eq T2 T2' T F2)
    ,  spy(interp_isa T1 T T1i)
    ,  spy(interp_isa T2 T T2i)
    ,  spy(interp_isa T1' T T1i')
    ,  spy(interp_isa T2' T T2i')
    ,  spy(interp T Ti)
    ,  spy(F = x\ impl_app ( 
                impl_app ( 
                 forall_app ( 
                  forall_app ( 
                   impl_app ( 
                    forall_app ( 
                     forall_app (k_propId Ti) T1i) T1i') F1) T2i) T2i') F2) x
        )
    .

tau_eq (propEq _ _ _ ) (propEq _ _ _) (h\h'\k\ k).



proof_eq  _ _ (propEq _T _A _B) (id singleton star).


/* NEW INTERPRETATION AND LIBRARY */
type propEqLib list libraryEntry -> prop.
type propEq_trasp mttType -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> (mttTerm -> mttTerm) ->
     (mttTerm -> mttTerm) -> mttTerm -> mttType.
type propEq_setoidDep mttType -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> (mttTerm -> mttTerm) ->
     (mttTerm -> mttTerm) -> mttTerm.


new_interp_type (propEq A Aa1 Aa2) O :-
  spy(interp A Ai),
  new_interp_type A As,
     % Aa1 and Aa2 should be both of ext type A
  spy(interp_isa Aa1 A Aa1i),
  spy(interp_isa Aa2 A Aa2i),
  O = (prop_setoid (decode (app (app (app (setoid_rel Ai) As) Aa1i) Aa2i))).

new_interp_dep_type A (a\ (propEq (B a) (Bb1 a) (Bb2 a))) O :-
  spy(interp A Ai),
  macro_interp A (a\ai\_\_\ interp (B a) (Bi ai)),
  macro_interp A (a\ai\_\_\ (interp_isa (Bb1 a) (B a) (Bb1i ai), interp_isa (Bb2 a) (B a) (Bb2i ai))),
  new_interp_type A As,
  new_interp_dep_type A B Bs,
  O = (propEq_setoidDep Ai Bi As Bs Bb1i Bb2i).
  %% Bb1i and Bb2i declarations with univPiT would require to know an element ai of Ai
  %% possibly need a new abstraction mechanism for terms of dependent types (univDepPiT)


propEqLib L :- L = [

 (univPi Ai\
  univDepPi Ai Bi\
   univPiT (setoid Ai) aS\
   univPiT (setoidDep Ai Bi aS) bS\
   univDepPiT Ai Bi b1\
   univDepPiT Ai Bi b2\
   univPiT (setSigma (setPi Ai x\ setoid (propEq (Bi x) (b1 x) (b2 x))) _\
		  	    (setPi Ai x1\ setPi Ai x2\
	            	      setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	    	setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2)))) cc\
   (locTypeDefL (propEq_trasp Ai Bi aS bS b1 b2 cc) col
   		(setPi Ai x1\ setPi Ai x2\
		    setPi (propEq (Bi x1) (b1 x1) (b2 x1)) y1\ setPi (propEq (Bi x1) (b1 x1) (b2 x1)) y2\
		     setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
		      setPi (decode (app (app (app (setoid_rel (propEq (Bi x1) (b1 x1) (b2 x1)))
		      	    	    (app (elim_setSigma cc (_\ (setPi Ai x\ setoid (propEq (Bi x) (b1 x) (b2 x)))) (x\y\x)) x1)) y1) y2)) d2\
		       (decode (app (app (app (setoid_rel ((propEq (Bi x2) (b1 x2) (b2 x2))))
		       	       	    	 (app (elim_setSigma cc (_\ (setPi Ai x\ setoid (propEq (Bi x) (b1 x) (b2 x)))) (x\y\x)) x2))
					 (app (app (app (app (elim_setSigma cc
							       (_\ (setPi Ai x1\ setPi Ai x2\
								setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
								setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2))))
							    (x\y\y)) x1) x2) d1) y1))
				         (app (app (app (app (elim_setSigma cc
							     (_\ (setPi Ai x1\ setPi Ai x2\
								 setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
								 setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2))))
							     (x\y\y)) x1) x2) d1) y2)))))),
   
 (univPi Ai\
   univDepPi Ai Bi\
    univPiT (setoid Ai) aS\
     univPiT (setoidDep Ai Bi aS) bS\
      univDepPiT Ai Bi b1\
       univDepPiT Ai Bi b2\
        %hyp debug debug
        (locDefL (propEq_setoidDep Ai Bi aS bS b1 b2) (setoidDep Ai (a\ (propEq (Bi a) (b1 a) (b2 a))) aS)
   (pair (setSigma (setPi Ai x\ setoid (propEq (Bi x) (b1 x) (b2 x))) _\
		  	    (setPi Ai x1\ setPi Ai x2\
	            	      setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	    	setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2))))
	 (cc\ (setPi Ai x1\ setPi Ai x2\
		    setPi (propEq (Bi x1) (b1 x1) (b2 x1)) y1\ setPi (propEq (Bi x1) (b1 x1) (b2 x1)) y2\
		     setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
		      setPi (decode (app (app (app (setoid_rel (propEq (Bi x1) (b1 x1) (b2 x1)))
		      	    	    (app (elim_setSigma cc (_\ (setPi Ai x\ setoid (propEq (Bi x) (b1 x) (b2 x)))) (x\y\x)) x1)) y1) y2)) d2\
		       (decode (app (app (app (setoid_rel ((propEq (Bi x2) (b1 x2) (b2 x2))))
		       	       	    	 (app (elim_setSigma cc (_\ (setPi Ai x\ setoid (propEq (Bi x) (b1 x) (b2 x)))) (x\y\x)) x2))
					 (app (app (app (app (elim_setSigma cc
							       (_\ (setPi Ai x1\ setPi Ai x2\
								setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
								setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2))))
							    (x\y\y)) x1) x2) d1) y1))
				         (app (app (app (app (elim_setSigma cc
							     (_\ (setPi Ai x1\ setPi Ai x2\
								 setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
								 setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2))))
							     (x\y\y)) x1) x2) d1) y2)))))
	(pair (setPi Ai x\ setoid (propEq (Bi x) (b1 x) (b2 x)))
	      (_\ (setPi Ai x1\ setPi Ai x2\
	            	      setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	    	setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2))))
	      (lambda Ai x\ (prop_setoid (propEq (Bi x) (b1 x) (b2 x))))
	      (fixMe "cast" (setPi Ai x1\ setPi Ai x2\
	            	      setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	    	setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2)))))
	%%% sostituire cc appropriato
	(fixMe "proof_trasp" (propEq_trasp Ai Bi aS bS b1 b2
	   (pair (setPi Ai x\ setoid (propEq (Bi x) (b1 x) (b2 x)))
	      (_\ (setPi Ai x1\ setPi Ai x2\
	            	      setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	    	setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2))))
	      (lambda Ai x\ (prop_setoid (propEq (Bi x) (b1 x) (b2 x))))
	      (fixMe "cast" (setPi Ai x1\ setPi Ai x2\
	            	      setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	    	setPi (propEq (Bi x1) (b1 x1) (b2 x1)) _\ (propEq (Bi x2) (b1 x2) (b2 x2))))))))))].
