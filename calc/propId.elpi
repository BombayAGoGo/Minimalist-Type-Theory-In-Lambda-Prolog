% will not exist at the emtt level, so no interpretation is needed

%%-- intensional propositional equality: propId

type propId mttType -> mttTerm -> mttTerm -> mttType.
type id     mttType -> mttTerm -> mttTerm.
type elim_id    mttTerm 
            -> (mttTerm -> mttTerm -> mttType) 
            -> (mttTerm -> mttTerm)
            -> mttTerm.



ofType (propId A AA1 AA2) KIND _IE
    :- ofType A KIND' int
    ,  pts_eq KIND' KIND
    ,  isa AA1 A int
    ,  isa AA2 A int
    .

of (id A AA) (propId A AA AA) int 
    :- spy(ofType A _ int)
    ,  spy(isa AA A int)
    .

of (elim_id P C CC) (C AA1 AA2) int
    :- spy(of P (propId A AA1 AA2) int)
    ,  spy(pi x\ pi y\ locDecl x A => locDecl y A => isaType (C x y) propc int)
    ,  spy(pi x\ locDecl x A => of (CC x) (C x x) int)
    .


hstep (elim_id (id _A AA) _C CC) (CC AA).


dconv (propId A AA1 AA2) (propId A' AA1' AA2')
    :- spy (conv A A')
    ,  spy (conv AA1 AA1')
    ,  spy(conv AA2 AA2')
    .

dconv (id A AA) (id A' AA')
    :- (conv A A')
    ,  (conv AA AA')
    .

dconv (elim_id P C CC) (elim_id P' C' CC')
    :- conv P P'
    ,  isa P (propId A _ _) int
    ,  pi x\ pi y\ locDecl x A => locDecl y A => conv (C x y) (C' x y)
    ,  pi x\ locDecl x A => conv (CC x) (CC' x)
    .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                   ESTRAZIONE                                   %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

starify_nonset_ops_type (propId A AA1 AA2) Result
    :- starify_nonset_ops AA1 AA1'
    ,  starify_nonset_ops AA2 AA2'
    ,  starify_nonset_ops_type A A'
    ,  spy(Result = (propId A' AA1' AA2'))
    ,  !
    .

collapse_type (propId A _AA1 _AA2) Result
    :- conv A extractor_singleton
    ,  Result = extractor_singleton
    ,  !
    .

extract_set_ops_type (propId A AA1 AA2) Result SetList
    :- extract_set_ops AA1 AA11 AA1List
    ,  extract_set_ops AA2 AA21 AA2List
    ,  extract_set_ops_type A A1 AList
    ,  extract_collapsing_input AA11 A1 K1 AA11List
    ,  extract_collapsing_input AA21 A1 K1 AA21List
    ,  spy((is_informative K1 false
        ,    A' = A1, AA1' = AA11, AA2' = AA21)
        , !; A' = extractor_singleton, AA1' = extractor_star, AA2' = extractor_star)
    ,  spy(concat [AA21List, AA11List, AA2List, AA1List, AList] SetList)
    ,  spy(collapse_type (propId A' AA1' AA2') Result)
    ,  !
    .

extract_set_ops_type (propId A AA1 AA2) Result SetList
    :- extract_set_ops AA1 AA11 AA1List
    ,  extract_set_ops AA2 AA21 AA2List
    ,  extract_set_ops_type A A1 AList
    ,  extract_collapsing_input AA11 A1 K1 AA11List
    ,  extract_collapsing_input AA21 A1 K1 AA21List
    ,  spy((is_informative K1 false
        ,    A' = A1, AA1' = AA11, AA2' = AA21)
        , !; A' = extractor_singleton, AA1' = extractor_star, AA2' = extractor_star)
    ,  spy(concat [AA21List, AA11List, AA2List, AA1List, AList] SetList)
    ,  spy(collapse_type (propId A' AA1' AA2') Result)
    ,  !
    .


starify_nonset_ops (id A AA) Result
    :- starify_nonset_ops AA AA'
    ,  starify_nonset_ops_type A A'
    ,  spy(Result = (id A' AA'))
    ,  !
    .

%% C 1  ==>  1
collapse_term (id A _AA) Result []
    :- conv A extractor_singleton
    ,  Result = extractor_star
    ,  !
    .

%% A' -> C A'  ==>  A' -> C 1
extract_set_ops (id A AA) Result SetList
    :- spy(extract_set_ops_type A A1 AList)
    ,  spy(extract_set_ops AA AA1 AAList)
    ,  spy(extract_collapsing_input AA1 A1 K1 AA1List)
    ,  spy((is_informative K1 false
        ,    A' = A1, AA' = AA1)
        , !; A' = extractor_singleton, AA' = extractor_star)
    ,  spy(concat [AA1List, AAList, AList] SetList)
    ,  spy(collapse_term (id A' AA') Result [])
    ,  !
    .


starify_nonset_ops (elim_id P C CC) Result
    :- starify_nonset_ops P P'
    ,  isa P (propId A _ _) int
    ,  pi x\ locDecl x A => pi y\ locDecl y A => starify_nonset_ops_type (C x y) (C' x y)
    ,  pi x\ locDecl x A => starify_nonset_ops (CC x) (CC' x)
    ,  spy(Result = (elim_id P' C' CC'))
    ,  !
    .

%% 1 -> A'  ==>  A'
collapse_term (elim_id P _C CC) Result SetList
    :- isa P extractor_singleton int
    ,  extract_set_ops (CC extractor_star) Result SetList
    ,  !
    .

%% C 1 -> A'  ==>  A'
collapse_term (elim_id P _C CC) Result SetList
    :- isa P (propId extractor_singleton _ _) int
    ,  extract_set_ops (CC extractor_star) Result SetList
    ,  !
    .

extract_set_ops (elim_id P C CC) Result SetList
    :- isa P (propId A _ _) int
    ,  extract_set_ops P P' IdList
    ,  pi x\ locDecl x A => pi y\ locDecl y A => extract_set_ops_type (C x y) (C' x y) CList
    ,  pi x\ locDecl x A => extract_set_ops (CC x) (CC' x) CCList
    ,  spy(collapse_term (elim_id P' C' CC') Result ElimList)
    ,  concat [ElimList, CCList, CList, IdList] SetList
    ,  !
    .

