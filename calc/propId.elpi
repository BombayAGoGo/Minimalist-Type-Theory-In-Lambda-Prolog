% will not exist at the emtt level, so no interpretation is needed

%%-- intensional propositional equality: propId

type propId mttType -> mttTerm -> mttTerm -> mttType.
type id     mttType -> mttTerm -> mttTerm.
type elim_id    mttTerm 
            -> (mttTerm -> mttTerm -> mttType) 
            -> (mttTerm -> mttTerm)
            -> mttTerm.



ofType (propId A AA1 AA2) KIND _IE
    :- ofType A KIND' int
    ,  pts_eq KIND' KIND
    ,  isa AA1 A int
    ,  isa AA2 A int
    .

of (id A AA) (propId A AA AA) int 
    :- spy(ofType A _ int)
    ,  spy(isa AA A int)
    .

of (elim_id P C CC) (C AA1 AA2) int
    :- spy(of P (propId A AA1 AA2) int)
    ,  spy(pi x\ pi y\ locDecl x A => locDecl y A => isaType (C x y) propc int)
    ,  spy(pi x\ locDecl x A => of (CC x) (C x x) int)
    .


hstep (elim_id (id _A AA) _C CC) (CC AA).


dconv (propId A AA1 AA2) (propId A' AA1' AA2')
    :- spy (conv A A')
    ,  spy (conv AA1 AA1')
    ,  spy(conv AA2 AA2')
    .

dconv (id A AA) (id A' AA')
    :- (conv A A')
    ,  (conv AA AA')
    .

dconv (elim_id P C CC) (elim_id P' C' CC')
    :- conv P P'
    ,  isa P (propId A _ _) int
    ,  pi x\ pi y\ locDecl x A => locDecl y A => conv (C x y) (C' x y)
    ,  pi x\ locDecl x A => conv (CC x) (CC' x)
    .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                   ESTRAZIONE                                   %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Starification

starify_type (propId A AA1 AA2) LibMap Result
    :- starify_term AA1 LibMap AA1'
    ,  starify_term AA2 LibMap AA2'
    ,  starify_type A LibMap A'
    ,  spy(Result = (propId A' AA1' AA2'))
    ,  !
    .

starify_term (id A AA) LibMap Result
    :- starify_term AA LibMap AA'
    ,  starify_type A LibMap A'
    ,  spy(Result = (id A' AA'))
    ,  !
    .

starify_term (elim_id P C CC) LibMap Result
    :- starify_term P LibMap P'
    ,  isa P (propId A _ _) int
    ,  ((pi x\ locDecl x A => (name (C x), C' = C))
        , !; pi x\ locDecl x A => pi y\ locDecl y A => starify_type (C x y) LibMap (C' x y))
    ,  ((name CC, CC' = CC)
        , !; pi x\ locDecl x A => starify_term (CC x) LibMap (CC' x))
    ,  spy(Result = (elim_id P' C' CC'))
    ,  !
    .

%% Extraction

collapse_type (propId A _AA1 _AA2) Result _Vars _VarMap _LibMap []
    :- conv A extractor_singleton
    ,  Result = extractor_singleton
    ,  !
    .

extract_type (propId A AA1 AA2) Result Vars VarMap LibMap SetList
    :- extract_term AA1 _ Vars VarMap LibMap AA1List
    ,  extract_term AA2 _ Vars VarMap LibMap AA2List
    ,  extract_type A _ Vars VarMap LibMap AList
    ,  spy(concat [AA2List, AA1List, AList] SetList)
    ,  spy(collapse_type (propId extractor_singleton extractor_star extractor_star) Result Vars VarMap LibMap [])
    ,  !
    .

%% C 1  ==>  1
collapse_term (id A _AA) Result _Vars _VarMap _LibMap []
    :- conv A extractor_singleton
    ,  Result = extractor_star
    ,  !
    .

%% A' -> C A'  ==>  A' -> C 1
extract_term (id A AA) Result Vars VarMap LibMap SetList
    :- spy(extract_type A _ Vars VarMap LibMap AList)
    ,  spy(extract_term AA _ Vars VarMap LibMap AAList)
    ,  spy(concat [AAList, AList] SetList)
    ,  spy(collapse_term (id extractor_singleton extractor_star) Result Vars VarMap LibMap [])
    ,  !
    .

%% 1 -> 1  ==>  1
collapse_term (elim_id P C _CC) Result _Vars _VarMap _LibMap []
    :- isa P extractor_singleton int
    ,  conv (C extractor_star extractor_star) extractor_singleton
    ,  Result = extractor_star
    ,  !
    .

%% C 1 -> 1  ==>  1
collapse_term (elim_id P C _CC) Result _Vars _VarMap _LibMap []
    :- isa P (propId extractor_singleton _ _) int
    ,  conv (C extractor_star extractor_star) extractor_singleton
    ,  Result = extractor_star
    ,  !
    .

extract_term (elim_id P C CC) Result Vars VarMap LibMap SetList
    :- extract_term P P' Vars VarMap LibMap IdList
    ,  isa P (propId A _ _) int
    ,  ((isa P' extractor_singleton int
        ,    A' = extractor_singleton)
        , !; isa P' (propId A' _ _) int)
    ,  ((pi x\ locDecl x A => pi a\ locDecl a A' =>
            (name (C x), map_var (C x) VarMap (C' a), CList = []))
        , !; pi x\ locDecl x A => pi y\ locDecl y A => pi a\ locDecl a A' => pi b\ locDecl b A' =>
            extract_type (C x y) (C' a b) [(var_term _ b)|[(var_term _ a)|[(var_term _ y)|[(var_term _ x)|Vars]]]] [(var_mapping y b)|[(var_mapping x a)|VarMap]] LibMap CList)
    ,  ((name CC, map_var CC VarMap CC', CCList = [])
        , !; pi x\ locDecl x A => pi a\ locDecl a A' =>
            extract_term (CC x) (CC' a) [(var_term _ a)|[(var_term _ x)|Vars]] [(var_mapping x a)|VarMap] LibMap CCList)
    ,  spy(collapse_term (elim_id P' C' CC') Result Vars VarMap LibMap ElimList)
    ,  concat [ElimList, CCList, CList, IdList] SetList
    ,  !
    .

