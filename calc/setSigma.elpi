% for now this is only needed to interpret dependent products types, so no interpretation is needed.

%%-- dependet sums: setSigma
type setSigma mttType -> (mttTerm -> mttType) -> mttType.
type pair mttType ->  (mttTerm -> mttType) -> mttTerm -> mttTerm -> mttTerm.
type elim_setSigma mttTerm -> (mttTerm -> mttType) -> (mttTerm -> mttTerm -> mttTerm) -> mttTerm.


ofType (setSigma B C) KIND IE 
    :- spy(ofType B KIND1 IE)
    ,  spy(pi b\ locDecl b B => ofType (C b) KIND2 IE)
    ,  (pts_fun KIND1 KIND2 KIND)
    .

of (pair B C BB CC) (setSigma B C) IE 
    :- ofType B _ IE
    ,  ofType (C BB) _ IE
    ,  isa BB B IE
    ,  isa CC (C BB) IE
    .

of (elim_setSigma Pair M MM) (M Pair) IE 
    :- of Pair (setSigma B C) IE
    ,  pi z \ locDecl z (setSigma B C) => ofType (M z) _ IE
    ,  pi x \ pi y \
            locDecl x B => locDecl y (C x) =>  
                isa (MM x y) (M (pair B C x y)) IE
    .

hstep (elim_setSigma Pair M Mm) (Mm Bb Cc) 
    :- hnf Pair (pair B C Bb Cc)
    ,  isa Bb B _
    ,  isa Cc (C Bb) _
    ,  pi z\ locDecl z (setSigma B C) => ofType (M z) _ IE
    ,  pi x \ pi y \
        locDecl x B  => locDecl y (C x) =>  
            isa (Mm x y) (M (pair B C x y))  IE
    .


dconv (setSigma B C) (setSigma B' C') :- (conv B B'), (pi x\ locDecl x B => conv (C x) (C' x)).

dconv (pair B C BB CC) (pair B' C' BB' CC') 
    :- (conv B B')
    ,  (pi x\ locDecl x B => conv (C x) (C' x))
    ,  (conv BB BB')                             %% conv BB BB modificato in conv BB BB'
    ,  (conv CC CC')
    .

dconv (elim_setSigma Pair M MM) (elim_setSigma Pair' M' MM') 
    :- (conv Pair Pair')
    ,  (of Pair (setSigma B C) _)
    ,  (pi z\ locDecl z (setSigma B C) => conv (M z) (M' z))
    ,  (pi x\ pi y\  locDecl x B => locDecl y (C x) => conv (MM x y) (MM' x y))
    .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                   TRADUZIONE                                   %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

interp (setSigma B C) T :-
       spy ( interp B Bi ),
       spy ( macro_interp B (x\xi\_\_\ interp (C x) (Ci xi)) ),
       spy (T = (setSigma Bi Ci) )
       .

interp (pair B C BB CC) T :-
       interp B Bi,
       of BB B' ext,                                     %% B' is the extensional type of BB
       	     						 %% convertible to the type B
       macro_interp B' (x\xi\_\_\ interp (C x) (Ci xi)),  		 	      	  	   
       interp_isa BB B' BBi,   
       interp_isa CC (C BB) CCi,			 
       T = (pair Bi Ci BBi CCi)                          %% Ci parametric on xi, which is the
       	   	       	   				 %% interpretation of an x:B', just like BBi
       .

interp (elim_setSigma Pair M MM) T :-
       print "ELIM_SETSIGMA INTERPRETATION",
       spy (of Pair (setSigma B C) ext),
       spy (interp B Bi),
       spy (interp C Ci),
       spy (interp_isa MM (setPi (setSigma B C) D) MMi),
       spy (interp_isa Pair (setSigma B C) PairI),				%% needs isa? Possible problem with types of function
       	      	   					%% MM being different intensionally
       spy (pi x \ pi y \ pi xi \ pi yi \
            locDecl x B => locDecl y (C x) => locDecl xi Bi =>
	    (interp x xi) => locDecl yi (Ci xi) => (interp y yi) =>  
                (interp (M (pair B C x y)) (Mi xi yi))),
       spy (T = (elim_setSigma PairI                           %% PairI: (setSigma Bi' Ci')
			  (p\ (Mi p))   		  %% function from setSigma Bi' Ci' to the range of MM
			  (w1\w2\ app (elim_setSigma (app (elim_setSigma MMi (_\setPi Bi Type) (x\y\x)) w1) %% T is a setSigma setPi proof
			  	      		     (_\ (setPi (Ci w1) (_\ (Mi  w1 w2))))	 %% not really needed 
						     (x\y\x))
				       w2)))
       .

setoid_eq (setSigma B C) P :-
       print "SETSIGMA SETOID_EQ\n",
       interp B Bi,
       setoid_eq B EquB,
       macro_interp B (x\xi\_\_\ (interp (C x) (Ci xi) ,
       		      		 setoid_eq (C x) (EquC xi))),			   %% Equality over Ci xi
       macro_tau_cov_cov B B (x\x'\h\xi\xi'\hi\ tau (C x) (C x') (FCC xi xi' hi)), %% Cast from type (C x)i to (C x')i with
       		     			       	     	      	     	     	   %% x,x':B
       pi w\ (locDecl w (setSigma Bi Ci)) => ( p1 w (P1 w),
       	  	       	      	     	       p2 w (P2 w)),
       %% There exists an equality d between p1s and p1z such that
       %% p2z : (C p1z) and the cast to type (C p1z) of p2s:(C p1s) are equal over type (C p1z)
       P = (s\z\
       		exist (EquB (P1 s) (P1 z)) d\
		      (EquC (P1 z)) ((FCC (P1 s) (P1 z) d) (P2 s))
	     		      	    (P2 z))
	.
	
tau (setSigma B C) (setSigma B' C') P :-
    print "SETSIGMA TAU FUNCTION\n",
    spy (interp (setSigma B' C') (setSigma Bi' Ci')),
    spy (tau B B' FB),
    spy (macro_tau_cov_cov B B' (x\x'\h\xi\xi'\hi\tau (C x) (C' x') (FC xi xi' hi))),
    	      	   			       %% given xi: Bi and xi':Bi' and hi intensional proof of their equality
					       %% return function from terms in (C x)int to terms in (C' x')int
					       
    setoid_refl B' Hi,
    %%(interp B' Bi', pi w1 \ print ["CSC: ", B', Bi', Hi, w1, (FB w1), (Hi w1)]),   %% debug
    P = w\ elim_setSigma w (_\ setSigma Bi' Ci')	%% w: (setSigma Bi Ci)
      	   		   (w1\ w2\ pair Bi' Ci'
			   	    	 (FB w1)
					 ( (FC w1 (FB w1) (Hi w1)) w2))    %% Uso di setoid_refl simile a quello in setPi.tau
    .


tau_eq (setSigma B C) (setSigma B' C') P :-
       print "SETSIGMA TAU_EQ FUNCTION\n",
       interp (setSigma B C) (setSigma Bi Ci),
       tau B B' TB,
       tau_eq B B' TeqB,
       setoid_eq B EquB,
       setoid_eq B' EquB',
       setoid_refl B' Hi,
       macro_tau_cov_cov B B' (x\x'\h\xi\xi'\hi\ ((tau (C x) (C' x') (TC xi xi' hi)),
       			      		    	  (tau_eq (C x) (C' x') (TeqC xi xi' hi)),
       			 		    	  (setoid_eq (C x) (EquC xi)),
       			 		    	  (setoid_eq (C' x') (EquC' xi')))),
						  
       macro_tau_cov_cov B B (x1\x2\h\x1i\x2i\hi\ tau (C x1) (C x2) (FCC x1i x2i hi)), %% Cast from type (C x1)i to (C x2)i with
       		     			       	     	      	     	     	       %% both x1 and x2 terms of type B
       pi w\ (locDecl w (setSigma Bi Ci)) => ( p1 w (P1 w),
       	  	       	      	     	       p2 w (P2 w)),
      
       P = s\z\d\
		pair_exist (EquB'(TB (P1 s)) (TB (P1 z)))			       %% type of equality on Bi'
			   (_\ (EquC' (TB (P1 z))) 		     	    	       %% type of equality on (C' x')i
			       	 ((TC (P1 z) (FB (P1 z)) (Hi (P1 z)))
				   ((FCC (P1 s) (P1 z) (elim_exist d (EquB (P1 s) (P1 z))(x\y\ x)))
				      (P2 s)))
			    	 ((TC (P1 z) (FB (P1 z)) (Hi (P1 z)))
				   (P2 z))      
			       )
			   (TeqB (P1 s)							%% Equality over Bi'...
				 (P1 z)
				 (elim_exist d (EquB (P1 s) (P1 z)) (x\y\ x)))
			   ((TeqC (P1 s)						%% Equality over (C' TB(p1z))i...
			   	  (TB (P1 z))
				  (TeqB (P1 s)  
				  	(P1 z)
				 	(elim_exist d (EquB (P1 s) (P1 z)) (x\y\ x))))
			      ((FCC (P1 s) (P1 z) (elim_exist d (EquB (P1 s) (P1 z)) (x\y\ x)))
			         (P2 s))       
			      (P2 z) 	       
			      ( elim_exist d ((EquC (P1 z))
			      		       	    ((FCC (P1 s) (P1 z) (elim_exist d (EquB (P1 s) (P1 z)) (x\y\ x)))
						       (P2 s))       
			    		            (P2 z))
			    		     (x\y\ y)))       
       .

setoid_refl (setSigma B C) H :-
     print "SETSIGMA SETOID_REFL FUNCTION\n",
     interp (setSigma B C) (setSigma Bi Ci),
     setoid_eq B EquB,
     setoid_refl B HB,
     macro_interp B (x\xi\_\_\ ( (setoid_eq (C x) (EquC xi)),
     		    	       	 (setoid_refl (C x) (HC xi)) )),
     pi w\ (locDecl w (setSigma Bi Ci)) => ( p1 w (P1 w),
       	  	       	      	     	       p2 w (P2 w)),
     H = z\ pair_exist (EquB (P1 z) (P1 z) )
       	    	       (_\ (EquC (P1 z)) (P2 z) (P2 z))
		       (HB (P1 z))
		       ((HC (P1 z)) (P2 z))
    	%% checks?
     .

setoid_symm (setSigma B C) H :-
      print "SETSIGMA SETOID_SYMM FUNCTION",
      interp (setSigma B C) (setSigma Bi Ci),
      setoid_eq B EquB,
      setoid_symm B SB,
      macro_interp B (x\xi\_\_\ ( (setoid_eq (C x) (EquC xi)),
      		     		  (setoid_symm (C x) (SC xi)) )),
      macro_tau_cov_cov B B (x1\x2\h\x1i\x2i\hi\ tau (C x1) (C x2) (FCC x1i x2i hi)),
      pi w\ (locDecl w (setSigma Bi Ci)) => ( p1 w (P1 w),
       	  	       	      	     	       p2 w (P2 w)),
      H = s\z\d\
      	  pair_exist (EquB (P1 z) (P1 s))					            %% Type of equality over Bi of p1z p1s
      	  	     ( _\ (EquC (P1 z))                         			    %% Type of equality over (C p1z)i between 
		       	     (P2 z)  				   			    %% p2z and the cast to (C p1z)i of p2s
		       	     ((FCC (P1 s) (P1 z) (elim_exist d (EquB (P1 s) (P1 z)) (x\y\ x)))
			     	 (P2 s)))
		     (SB (P1 s)							%% First element, obtained by induction on B 
		     	 (P1 z)
		     	 (elim_exist d (EquB (P1 s) (P1 z)) (x\y\ x)))
		     ((SC (P1 z))      	     	    				%% Second element, obtained by induction on (C p1z)
		     	  ((FCC (P1 s)						%% because of this, H will produce an equality over 
			  	(P1 z)						%% (C p1z)i between z and s, possibly causing problems?
			  	(elim_exist d (EquB (P1 s) (P1 z)) (x\y\ x)))
			      (P2 s))
			  (P2 z)
			  (( elim_exist d ((EquC (P1 z))
			      		       	 ((FCC (P1 s) (P1 z)
			    	  		      	(elim_exist d (EquB (P1 s) (P1 z)) (x\y\ x)))
						    (P2 s))       
			    			 (P2 z))
					  (x\y\ y))))
	%% checks?
      .



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                UTILITY                                         %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type p1, p2  A->A.	%% mttTerm->mttTerm? Needed for both ext and int pairs...
     	     		%% Currently unused
p1 Pair R :-
   of Pair (setSigma B C) IE,
   R = (elim_setSigma Pair (_\B) (x\y\ x) )
   .

p2 Pair R :-
   of Pair (setSigma B C) IE,
   p1 Pair R1,
   R = (elim_setSigma Pair (_\ (C R1)) (x\y\ y) )
.