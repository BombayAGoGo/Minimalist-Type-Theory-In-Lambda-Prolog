% exist

type exist mttType -> (mttTerm -> mttType) -> mttType.
type pair_exist mttType -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> mttTerm.
type elim_exist mttTerm -> mttType -> (mttTerm -> mttTerm -> mttTerm) -> mttTerm.


ofType (exist B C) KIND IE
    :- ofType B KIND1 IE
    ,  (pi x\ locDecl x B  => ofType (C x) KIND2 IE)
    ,  pts_for KIND1 KIND2 KIND
    .

of (pair_exist B C BB CC) (exist B C) IE 
    :- spy(ofType (exist B C) _ IE)
    ,  spy(isa BB B IE)
    ,  spy(isa CC (C BB) IE)
    .

of (elim_exist Pair M MM) M IE 
    :- spy(isa Pair (exist B C) IE)
    ,  spy(isaType M propc IE)
    ,  (pi x \ pi y \ locDecl x B => locDecl y (C x) =>  
                spy(isa (MM x y) M IE))
    .

hstep (elim_exist W _M MM) (MM Bb Cc) 
    :- hnf W (pair_exist _B _C Bb Cc)
    .

dconv (pair_exist B C Bb Cc) (pair_exist B' C' Bb' Cc')
    :- (conv B B')
    ,  (pi x\ locDecl x B => conv (C x) (C' x))
    ,  (conv Bb Bb')
    ,  (conv Cc Cc')
    .

dconv (elim_exist Pair M Mm) (elim_exist Pair' M' Mm') 
    :- (conv Pair Pair')
    ,  (isa Pair (exist B C) IE_)
    ,  (pi x\ pi y\ locDecl x B => locDecl y (C x)
        => conv (Mm x y) (Mm' x y))
    ,  (conv M M')
    .

dconv (exist B C) (exist B' C') 
    :- (conv B B')
    ,  (pi x\ locDecl x B => conv (C x) (C' x))
    .


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                   ESTRAZIONE                                   %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

starify_nonset_ops_type (exist B C) Result
    :- starify_nonset_ops_type B B'
    ,  pi b\ locDecl b B => starify_nonset_ops_type (C b) (C' b)
    ,  spy(collapse_type (exist B' C') Result)
    ,  !
    .

collapse_type (exist B C) Result
    :- spy(conv B extractor_singleton)
    ,  spy(conv C (_\extractor_singleton))
    ,  spy(Result = extractor_singleton)
    ,  !
    .

extract_set_ops_type (exist B C) Result SetList
    :- spy(extract_set_ops_type B B1 BList)
    ,  spy(ofType B Kind @level)
    ,  spy(is_informative Kind NeedsExtraction)
    ,  spy((NeedsExtraction = false
        ,    B' = B1)
        , !; B' = extractor_singleton)
    ,  spy(pi b\ locDecl b B => extract_set_ops_type (C b) (C' b) CList)
    ,  concat [CList, BList] SetList
    ,  spy(collapse_type (exist B' C') Result)
    ,  !
    .


starify_nonset_ops (pair_exist B C BB CC) Result 
    :- starify_nonset_ops BB BB'
    ,  starify_nonset_ops CC CC'
    ,  starify_nonset_ops_type (exist B C) (exist B' C')
    ,  spy(Result = (pair_exist B' C' BB' CC'))
    ,  !
    .

%% 1 -> 1 -> 1 x 1  ==>  1
collapse_term (pair_exist B C BB CC) Result []
    :- isa (pair_exist B C BB CC) (exist extractor_singleton (_\ extractor_singleton)) @level
    ,  Result = extractor_star
    ,  !
    .

%% A' -> 1 -> A' x 1  ==>  A' -> 1 -> 1 x 1
extract_set_ops (pair_exist B C BB CC) Result SetList
    :- spy(extract_set_ops BB BB1 BBList)
    ,  spy(extract_set_ops CC CC' CCList)
    ,  spy(extract_set_ops_type B B1 BList)
    ,  pi b\ locDecl b B => spy(extract_set_ops_type (C b) (C' b) CList)
    ,  spy(extract_collapsing_input BB1 B1 K1 BB1List)
    ,  spy((is_informative K1 false
        ,    B' = B1, BB' = BB1)
        , !; B' = extractor_singleton, BB' = extractor_star)
    ,  concat [BB1List, CCList, BBList, CList, BList] SetList
    ,  spy(collapse_term (pair_exist B' C' BB' CC') Result [])
    ,  !
    .


starify_nonset_ops (elim_exist Pair M MM) Result
    :- starify_nonset_ops Pair Pair'
    ,  isa Pair (exist B C) @level
    ,  starify_nonset_ops_type M M'
    ,  pi b\ pi c\ locDecl b B => locDecl c (C b) => starify_nonset_ops (MM b c) (MM' b c)
    ,  Result = (elim_exist Pair' M' MM')
    ,  !
    .

%% 1 -> A'  ==>  A'
collapse_term (elim_exist Pair _M MM) Result ElimList
    :- isa Pair extractor_singleton @level
    ,  extract_set_ops (MM extractor_star extractor_star) Result ElimList
    ,  !
    .

%% 1 x 1 -> A'  ==>  A'
collapse_term (elim_exist Pair _M MM) Result ElimList
    :- isa Pair (exist extractor_singleton (_\ extractor_singleton)) @level
    ,  extract_set_ops (MM extractor_star extractor_star) Result ElimList
    ,  !
    .

extract_set_ops (elim_exist Pair M MM) Result SetList
    :- extract_set_ops Pair Pair' PairList
    ,  isa Pair (exist B C) @level
    ,  extract_set_ops_type M M' MList
    ,  pi b\ pi c\ locDecl b B => locDecl c (C b) => extract_set_ops (MM b c) (MM' b c) MMList
    ,  spy(collapse_term (elim_exist Pair' M' MM') Result ElimList)
    ,  concat [ElimList, MMList, MList, PairList] SetList
    ,  !
    .

