%% To OCaml
%% setSum -> type ('a, 'b) set_sum = Inl of 'a | Inr of 'b;;
%% setSigma -> type ('a, 'b) set_sigma = { l: 'a; r: 'b };;
%% setPi -> 'a -> 'b
%% list -> 'a list
%% type dummy = Dummy;;

%% To Haskell
%% setSum -> data SetSum a b = Inl a | Inr b  deriving (Show)
%% setSigma -> data SetSigma a b = SetSigma { l :: a, r :: b }  deriving (Show)
%% setPi -> a -> b
%% data Dummy = Dummy

kind language type.
type ocaml, haskell language.

%macro @language :- ocaml.
macro @language :- haskell.

type translate_type mttType -> list lib_mapping_type -> string -> prop.

translate_program_to ocaml Code' Result
    :- Result is Code' ^ ";;"
    ,  !
    .
translate_program_to haskell Code' Result
    :- Result is Code'
    ,  !
    .

translate_program Code LibMap Result
    :- translate_term Code LibMap Code'
    ,  translate_program_to @language Code' Result
    ,  !
    .

%% Lib Translation

translate_univ_to ocaml F' Result
    :- Result is F'
    ,  !
    .
translate_univ_to haskell F' Result
    :- Result is F'
    ,  !
    .

translate_lib (univPi F) Vars LibMap Result
    :- spy(pi Bi\ ofType Bi set int => translate_lib (F Bi) [var_type _ _|Vars] LibMap F')
    ,  translate_univ_to @language F' Result
    ,  !
    .
translate_lib (univCol F) Vars LibMap Result
    :- spy(pi Bi\ ofType Bi col int => translate_lib (F Bi) [var_type _ _|Vars] LibMap F')
    ,  translate_univ_to @language F' Result
    ,  !
    .


translate_univDep_to ocaml F' Result
    :- Result is F'
    ,  !
    .
translate_univDep_to haskell F' Result
    :- Result is F'
    ,  !
    .

translate_lib (univDepPi Bi F) Vars LibMap Result
    :- pi Ci\ (pi x\ ofType (Ci x) set int :- isa x Bi int) =>
        (pi x\ pi y\ dconv (Ci x) (Ci y) :- conv x y) =>
            translate_lib (F Ci) [var_dep_type _ _ _|Vars] LibMap F'
    ,  translate_univDep_to @language F' Result
    ,  !
    .
translate_lib (univDepCol Bi F) Vars LibMap Result
    :- pi Ci\ (pi x\ ofType (Ci x) col int :- isa x Bi int) =>
        (pi x\ pi y\ dconv (Ci x) (Ci y) :- conv x y) =>
            translate_lib (F Ci) [var_dep_type _ _ _|Vars] LibMap F'
    ,  translate_univDep_to @language F' Result
    ,  !
    .


translate_univPiT_to ocaml F' Result
    :- Result is F'
    ,  !
    .
translate_univPiT_to haskell F' Result
    :- Result is F'
    ,  !
    .

translate_lib (univPiT T F) Vars LibMap Result
    :- spy(pi x\ of x T int => translate_lib (F x) [var_term _ _|Vars] LibMap F')
    ,  translate_univPiT_to @language F' Result
    ,  !
    .

translate_univDepPiT_to ocaml F' Result
    :- Result is F'
    ,  !
    .
translate_univDepPiT_to haskell F' Result
    :- Result is F'
    ,  !
    .

translate_lib (univDepPiT Ai Bi F) Vars LibMap Result
    :- pi t\ (pi x\ ofType (Bi x) set int :- isa x Ai int) => 
        (pi x\ pi y\ dconv (Bi x) (Bi y) :- conv x y) =>
            (pi x\ of (t x) (Bi x) int :- isa x Ai int) =>
                translate_lib (F t) [var_dep_term _ _ _|Vars] LibMap F'
    ,  translate_univDepPiT_to @language F' Result
    ,  !
    .

type translate_lib_def_term_arg mttTerm -> any -> string -> string -> prop.
translate_lib_def_term_arg (var_term _ _) A H' Result
    :- term_to_string A A'
    ,  Result is H' ^ " " ^ A'
    ,  !
    .
translate_lib_def_term_arg (var_dep_term _ _ _) A H' Result
    :- term_to_string A A'
    ,  Result is H' ^ " " ^ A'
    ,  !
    .
translate_lib_def_term_arg _ _ H' H'.

translate_lib_def_term (lib_app H A) [Var|VarsTL] Result HName
    :- translate_lib_def_term H VarsTL H' HName
    ,  spy(translate_lib_def_term_arg Var A H' Result)
    ,  !
    .
translate_lib_def_term H [] Result Result
    :- term_to_string H Result
    ,  !
    .

translate_locDefL_to ocaml NName N' TY' TE' Result
    :- Signature is "val " ^ NName ^ " : " ^ TY'
    ,  Definition is "let " ^ N' ^ " = " ^ TE' ^ ";;"
    ,  Result is Signature ^ "\n" ^ Definition
    ,  !
    .
translate_locDefL_to haskell NName N' TY' TE' Result
    :- Signature is NName ^ " :: " ^ TY'
    ,  Definition is "" ^ N' ^ " = " ^ TE' ^ ""
    ,  Result is Signature ^ "\n" ^ Definition
    ,  !
    .

translate_lib (locDefL N TY TE) Vars LibMap Result
    :- spy(translate_lib_def_term N Vars N' NName)
    ,  spy(translate_term TE LibMap TE')
    ,  spy(translate_type TY LibMap TY')
    ,  translate_locDefL_to @language NName N' TY' TE' Result
    ,  !
    .


type translate_lib_def_type_arg mttTerm -> any -> string -> string -> prop.
translate_lib_def_type_arg (var_type _ _) A H' Result
    :- term_to_string A SA
    ,  translate_type_var_to @language SA A'
    ,  Result is H' ^ " " ^ A'
    ,  !
    .
translate_lib_def_type_arg (var_dep_type _ _ _) A H' Result
    :- term_to_string A SA
    ,  translate_type_var_to @language SA A'
    ,  Result is H' ^ " " ^ A'
    ,  !
    .
translate_lib_def_type_arg _ _ H' H'.

translate_lib_def_type (lib_app H A) [Var|VarsTL] Result HName
    :- translate_lib_def_type H VarsTL H' HName
    ,  spy(translate_lib_def_type_arg Var A H' Result)
    ,  !
    .
translate_lib_def_type H [] Result Result
    :- term_to_string H Result
    ,  !
    .

turn_to_ocaml_type_decl_ "" "" :- !.
turn_to_ocaml_type_decl_ S Result
    :- spy(rex_replace "^ \\(['a-zA-Z0-9_]+\\)\\( .*\\)?$" "\\1" S SHead)
    ,  spy(rex_replace "^ \\(['a-zA-Z0-9_]+\\)\\( .*\\)?$" "\\2" S STail)
    ,  spy(turn_to_ocaml_type_decl_ STail STail')
    ,  ((STail' = ""
        ,    spy(Result is SHead))
        , !; spy(Result is SHead ^ ", " ^ STail'))
    .
turn_to_ocaml_type_decl S Result
    :- spy(rex_replace "^\\(extr_\\)?\\([a-zA-Z0-9_]+\\)\\( .*\\)?$" "\\2" S SHead)
    ,  spy(rex_replace "^\\(extr_\\)?\\([a-zA-Z0-9_]+\\)\\( .*\\)?$" "\\3" S STail)
    ,  spy(turn_to_ocaml_type_decl_ STail STail')
    ,  ((STail' = ""
        ,    spy(Result is "extr_" ^ SHead))
        , !; spy(Result is "(" ^ STail' ^ ") extr_" ^ SHead))
    .
translate_locTypeDefL_to ocaml N' TY' Result
    :- spy(turn_to_ocaml_type_decl N' NR)
    ,  Result is "type " ^ NR ^ " = " ^ TY' ^ ";;"
    ,  !
    .

turn_to_haskell_type_decl S Result
    :- spy(rex_replace "^\\(extr_\\)?\\([a-zA-Z0-9_]+\\)\\( .*\\)?$" "\\2\\3" S S1)
    ,  spy(Result is "Extr_" ^ S1)
    .
translate_locTypeDefL_to haskell N' TY' Result
    :- spy(turn_to_haskell_type_decl N' NR)
    ,  Result is "type " ^ NR ^ " = " ^ TY' ^ ""
    ,  !
    .

translate_lib (locTypeDefL N _KIND TY) Vars LibMap Result
    :- spy(translate_lib_def_type N Vars N' _)
    ,  spy(translate_type TY LibMap TY')
    ,  translate_locTypeDefL_to @language N' TY' Result
    ,  !
    .


translate_hyp_to ocaml E' Result
    :- Result is E'
    ,  !
    .
translate_hyp_to haskell E' Result
    :- Result is E'
    ,  !
    .

translate_lib (hyp H1 _ E) Vars LibMap Result
    :- (H1 => spy(translate_lib E Vars LibMap E'))
    ,  translate_hyp_to @language E' Result
    ,  !
    .


translate_cut_to ocaml E' Result
    :- Result is E'
    ,  !
    .
translate_cut_to haskell E' Result
    :- Result is E'
    ,  !
    .

translate_lib (cut H E) Vars LibMap Result
    :- (process_cut H Hyp, Hyp => spy(translate_lib E Vars LibMap E'))
    ,  translate_cut_to @language E' Result
    ,  !
    .

%% Base Case

type translate_term_arg mttTerm -> B -> list lib_mapping_type -> string -> prop.
translate_term_arg (var_type _ _) _A _LibMap Result
    :- Result = ""
    ,  !
    .
translate_term_arg (var_term _ _) A LibMap Result
    :- spy(translate_term A LibMap Result)
    ,  !
    .
translate_term_arg (var_dep_type _ _ _) _A _LibMap Result
    :- Result = ""
    ,  !
    .
translate_term_arg (var_dep_term _ _ X) A LibMap Result
    :- spy(pi x\ locDecl x X => translate_term (A x) LibMap A')
    ,  Result = A'
    ,  !
    .

translate_lib_call_term (lib_app H A) LibMap Result ArgList KindTL
    :- spy(translate_lib_call_term H LibMap H' ArgList [KindHD|KindTL])
    ,  spy(translate_term_arg KindHD A LibMap A')
    ,  ((A' = "", Result is H'), !; Result is "(" ^ H' ^ " " ^ A' ^ ")")
    ,  !
    .
translate_lib_call_term H LibMap Result ArgList Kind
    :- is_extrlib_call H LibMap Hdef
    ,  spy(stylized_type_of Hdef ArgList Kind)
    ,  term_to_string H Result
    ,  !
    .

translate_term (lib_app H A) LibMap Result
    :- get_arg_list (lib_app H A) ArgList
    ,  spy(translate_lib_call_term (lib_app H A) LibMap Result ArgList _)
    ,  !
    .

type translate_type_arg mttTerm -> B -> list lib_mapping_type -> string -> prop.
translate_type_arg (var_type _ _) A LibMap Result
    :- spy(translate_type A LibMap Result)
    ,  !
    .
translate_type_arg (var_term _ _) _A _LibMap Result
    :- Result = ""
    ,  !
    .
translate_type_arg (var_dep_type _ _ X) A LibMap Result
    :-  spy(pi x\ locDecl x X => translate_type (A x) LibMap A')
    ,  Result = A'
    ,  !
    .
translate_type_arg (var_dep_term _ _ _X) _A _LibMap Result
    :- Result = ""
    ,  !
    .

translate_lib_call_type  (lib_app H A) LibMap Result ArgList KindTL
    :- spy(translate_lib_call_type  H LibMap H' ArgList [KindHD|KindTL])
    ,  spy(translate_type_arg KindHD A LibMap A')
    ,  ((A' = "", Result is H'), !; Result is H' ^ " " ^ A')
    ,  !
    .
translate_lib_call_type H LibMap Result ArgList Kind
    :- is_extrlib_call H LibMap Hdef
    ,  spy(stylized_type_of Hdef ArgList Kind)
    ,  term_to_string H Result
    ,  !
    .

translate_lib_call_type_to ocaml Call Result
    :- turn_to_ocaml_type_decl Call Result
    ,  !
    .
translate_lib_call_type_to haskell Call Result
    :- turn_to_haskell_type_decl Call Result
    ,  !
    .
translate_type (lib_app H A) LibMap Result
    :- get_arg_list (lib_app H A) ArgList
    ,  spy(translate_lib_call_type (lib_app H A) LibMap LibCall ArgList _)
    ,  translate_lib_call_type_to @language LibCall Result
    ,  !
    .

translate_term (# A B) LibMap Result
    :- name A A []
    ,  translate_dep_term A LibMap A'
    ,  translate_term B LibMap B'
    ,  Result is "(" ^ A' ^ " " ^ B' ^ ")"
    ,  !
    .
translate_type (# A _B) LibMap Result
    :- name A A []
    ,  translate_dep_type A LibMap A'
    ,  Result is A'
    ,  !
    .
translate_term X LibMap Result
    :- name X A [B]
    ,  translate_dep_term A LibMap A'
    ,  translate_term B LibMap B'
    ,  Result is "(" ^ A' ^ " " ^ B' ^ ")"
    ,  !
    .
translate_type X LibMap Result
    :- name X A [_B]
    ,  translate_dep_type A LibMap A'
    ,  Result is A'
    ,  !
    .

translate_term (fixMe A _) _ Result
    :- (translate_dummy_to @language A Result)
    ,  !
    .

translate_term A _ Result
    :- spy(name A A [])
    ,  spy(term_to_string A S)
    ,  Result is S
    ,  !
    .
translate_term H LibMap Result
    :- is_lib_call H LibMap _
    ,  term_to_string H Result
    ,  !
    .

translate_type_var_to ocaml S Result
    :- Result is "'" ^ S
    ,  !
    .
translate_type_var_to haskell S Result
    :- Result is S
    ,  !
    .

translate_type A _ Result
    :- name A A []
    ,  term_to_string A S
    ,  translate_type_var_to @language S Result
    ,  !
    .
translate_type H LibMap Result
    :- is_lib_call H LibMap _
    ,  term_to_string H Result
    ,  !
    .

translate_dep_term A _ Result
    :- name A A []
    ,  term_to_string A S
    ,  Result is S
    ,  !
    .

translate_dep_type_var_to ocaml S Result
    :- Result is "'" ^ S
    ,  !
    .
translate_dep_type_var_to haskell S Result
    :- Result is S
    ,  !
    .

translate_dep_type A _ Result
    :- name A A []
    ,  term_to_string A S
    ,  translate_dep_type_var_to @language S Result
    ,  !
    .

translate_dummy_type_to ocaml _A "dummy".
translate_dummy_type_to haskell _A "Dummy".

translate_type A _ Result
    :- spy(translate_dummy_type_to @language A Result)
    ,  !
    .


translate_dummy_to ocaml _A "Dummy".
translate_dummy_to haskell _A "Dummy".

translate_term A _ Result
    :- (translate_dummy_to @language A Result)
    ,  !
    .

%% Reabstracted Lambda Translation

translate_extractor_type_lambda_to ocaml F' Result
    :- Result is F'
    ,  !
    .
translate_extractor_type_lambda_to haskell F' Result
    :- Result is F'
    ,  !
    .

translate_term (extractor_type_lambda K F) LibMap Result
    :- spy(pi Bi\ ofType Bi K int => translate_term (F Bi) LibMap F')
    ,  translate_extractor_type_lambda_to @language F' Result
    ,  !
    .


translate_extractor_dep_type_lambda_to ocaml F' Result
    :- Result is F'
    ,  !
    .
translate_extractor_dep_type_lambda_to haskell F' Result
    :- Result is F'
    ,  !
    .

translate_term (extractor_dep_type_lambda A K F) LibMap Result
    :- spy(pi a\ of a A int => pi Bi\ (isaType (Bi a) K int) => translate_term (F Bi) LibMap F')
    ,  translate_extractor_dep_type_lambda_to @language F' Result
    ,  !
    .

translate_term (extractor_dep_lambda A B F) LibMap Result
    :- pi a\ of a A int => pi b\ (of (b a) (B a) int) =>
        (translate_term (F b) LibMap SF, translate_dep_term b LibMap Sb)
    ,  translate_lambda_abs_to @language SF Sb Result
    ,  !
    .

