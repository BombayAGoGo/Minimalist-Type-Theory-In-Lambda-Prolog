accumulate debug.

accumulate main.

accumulate calc/setSigma.
accumulate calc/and.
accumulate calc/propEq.
accumulate calc/forall.
accumulate calc/exist.
accumulate calc/propId.
accumulate calc/implies.
%accumulate calc/letIn.
accumulate calc/or.
accumulate calc/setSum.
accumulate calc/singleton.
accumulate calc/setPi.

type m,l,f,g,h,i,n A.
type test A.

main :- nodebug => notquicktest.

macro_test I O 
    :- nodebug => spy(ofType I Te ext)
    ,  spy(interp I O)
    ,  spy(ofType O Ti int)
    .

quicktest 
    :- makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\singleton )  _), makeline
    ,  spy(setoid_tran (setPi singleton x\singleton )  _), makeline
    ,  spy(setoid_tran (setPi (setPi singleton x\singleton ) x\(setPi singleton x\singleton ) )  _), makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\propEq singleton star star )  _),  makeline
    ,  spy(sigma P\ setoid_tran singleton P), makeline
    ,  spy(setoid_refl (setPi (propEq singleton star star) x\singleton) _), makeline
    ,  spy(setoid_refl (setPi (setPi singleton _\singleton) x\singleton) _), makeline
    ,  spy(setoid_symm (setPi singleton x\singleton)  _), makeline
    ,  spy(setoid_symm (setPi (setPi singleton x\singleton) x\singleton)  _), makeline
    ,  spy(setoid_symm (setPi (setPi (setPi singleton x\singleton) x\(setPi singleton x\singleton)) x\(setPi singleton x\singleton))  _), makeline
    ,  spy(setoid_tran 
    (setPi (setPi singleton x\(propEq singleton x star) ) 
        x\(setPi (setPi singleton x\singleton ) x\(setPi singleton x\singleton ) ) )  _), makeline
    ,  spy(setoid_tran (setPi singleton x\(setPi singleton y\(propEq singleton x y) ) )  _), makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\(setPi (propEq singleton star star) x\singleton ) )  _), makeline
    ,  spy(setoid_refl (setPi (setPi (propEq singleton star star) x\singleton) x\(setPi (propEq singleton star star) x\singleton)) _), makeline
    .

notquicktest 
    :- makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test m A B C), makeline %This one takes a lot of time
    ,  spy(sigma A\ sigma B\ sigma C\ test l A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test f A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test g A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test h A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test i A B C), makeline
    ,  spy(sigma O\ test n O), makeline
    ,  quicktest
    .

test n O
    :- (T = 
        setPi (setPi (setPi singleton _\singleton) _\singleton) f\
        (propEq singleton (app f (lambda singleton x\ x)) star) 
        )    
    , macro_test T O
    .





test m A Q Qy
 :- Long = ( forall singleton x\
      implies (propEq singleton x star) 
      (implies (propEq singleton star x)
      (forall 
            (setPi 
                (setPi 
                    (setPi singleton y\ propEq singleton star x) _\ 
                    singleton) 
                _\singleton
            ) f\
                (propEq singleton 
                    (app f (lambda (setPi singleton y\ propEq singleton star star)
                         x\ star)) 
                    star) 
            ))
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test l A Q Qy
 :- Long = ( forall singleton x\
      implies (propEq singleton x star) 
      (implies (propEq singleton star x)
      ( forall 
            (setPi 
                (setPi singleton y\ propEq singleton star x) 
                _\singleton
            ) f\
                (propEq singleton 
                    (app f (lambda singleton x\ (eq singleton star))) 
                    star) 
            ))
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test i A B C 
 :- Long = ( forall singleton x\ forall singleton y\ 
    (implies 
        (propEq singleton x y) (implies 
        (propEq singleton y x) (implies 
        (propEq singleton x star) (implies 
        (propEq singleton y star) (implies 
        (propEq singleton star x) (implies 
        (propEq singleton star y) (
            forall 
                (setPi (propEq singleton x star) d\ 
                    setPi (propEq singleton x x) h\
                        (propEq
                            (propEq singleton x star)
                                d
                                h
                            )) f\
                propEq
                    (propEq
                        (propEq singleton star star)
                            (eq singleton y)
                            (eq singleton x))
                    (app 
                        (app f (eq singleton y))
                        (eq singleton x))
                    (app 
                        (app f (eq singleton x))
                        (eq singleton x))
            )
        )))))))     
    ,
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long B),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType B C int)
    .




test h A Q Qy
 :- Long = (
        forall (setPi (setPi singleton _\singleton) _\singleton) f\
        (propEq singleton (app f (lambda singleton x\ x)) star) 
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test g A Q Qy
 :- Long = (
        forall singleton x\
        forall (setPi singleton _\singleton) g\
        forall (setPi (propEq singleton (app g x) (app g star)) _\singleton) f\
        (implies (propEq singleton star x)
            (propEq singleton 
                    (app f (eq singleton (app g star))) 
                    (app f (eq singleton (app g star))) 
            )
        )
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .




test f A Q Qy
 :- Long = (
        forall singleton x\
        forall (setPi (propEq singleton x star) _\singleton) f\
        ( implies (propEq singleton star x)
            (propEq singleton 
                    (app f (eq singleton star)) 
                    (app f (eq singleton star)) 
            )
        )
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

testZ A B C
  :- Long = 
(forall 
  singleton x\
  (implies (propEq singleton x star) (implies (propEq singleton star x) 
      (forall 
        (setPi 
          (propEq 
            singleton star x) y\
          (setPi 
            (propEq (propEq singleton star star) y (eq singleton star)) _\
            singleton)) f\   
        (propEq singleton 
        (app 
            (app f (eq singleton star))
            (eq (propEq singleton star star) 
            (eq singleton star)
            )) 
        star)
            )  ))
    )
    , spy(ofType Long A ext)
    , spy(interp Long B)
    , spy(ofType B C int)
    .
%%% SETSIGMA TESTS %%%

test w A
 :- Long = (pair singleton singleton star star),
    of Long A ext.


testE A B C
  :- Long = 
(forall 
  (propEq singleton star star) x\
  (implies (propEq (propEq singleton star star) x (eq singleton star)) (implies (propEq (propEq singleton star star) (eq singleton star) x) 
      (forall 
        (setPi 
          (propEq 
            (propEq singleton star star) (eq singleton star) x) y\
          (setPi 
            (propEq (propEq (propEq singleton star star) (eq singleton star) (eq singleton star)) y (eq (propEq singleton star star) (eq singleton star))) _\
            (propEq singleton star star))) f\   
        (propEq (propEq singleton star star) 
        (app 
            (app f (eq (propEq singleton star star) (eq singleton star)))
            (eq (propEq (propEq singleton star star) (eq singleton star) (eq singleton star)) 
            (eq (propEq singleton star star) (eq singleton star))
            )) 
        (eq singleton star))
            )  ))
    )
    , spy(ofType Long A ext)
    , spy(interp Long B)
    , spy(ofType B C int)
    .
