accumulate debug.

accumulate main.

accumulate calc/and.
accumulate calc/propEq.
accumulate calc/forall.
accumulate calc/exist.
accumulate calc/propId.
accumulate calc/implies.
%accumulate calc/letIn.
accumulate calc/list.
accumulate calc/or.
accumulate calc/setSum.
accumulate calc/singleton.
accumulate calc/setPi.
accumulate calc/setSigma.

accumulate extractor.

kind testFlag type.

type m,l,f,g,h,i,n,p,q testFlag.
type s1,s2,s3,s4,s5,s6,s7,s8 testFlag.
type pd1 testFlag.
type test A.

sigmaTest :- setSigma_test.

macro_test I O 
    :- spy(ofType I _Te ext)
    ,  spy(interp I O)
    ,  spy(ofType O _Ti int)
    .

quicktest 
    :- makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\singleton )  _), makeline
    ,  spy(setoid_tran (setPi singleton x\singleton )  _), makeline
    ,  spy(setoid_tran (setPi (setPi singleton x\singleton ) x\(setPi singleton x\singleton ) )  _), makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\propEq singleton star star )  _),  makeline
    ,  spy(sigma P\ setoid_tran singleton P), makeline
    ,  spy(setoid_refl (setPi (propEq singleton star star) x\singleton) _), makeline
    ,  spy(setoid_refl (setPi (setPi singleton _\singleton) x\singleton) _), makeline
    ,  spy(setoid_symm (setPi singleton x\singleton)  _), makeline
    ,  spy(setoid_symm (setPi (setPi singleton x\singleton) x\singleton)  _), makeline
    ,  spy(setoid_symm (setPi (setPi (setPi singleton x\singleton) x\(setPi singleton x\singleton)) x\(setPi singleton x\singleton))  _), makeline
    ,  spy(setoid_tran 
    (setPi (setPi singleton x\(propEq singleton x star) ) 
        x\(setPi (setPi singleton x\singleton ) x\(setPi singleton x\singleton ) ) )  _), makeline
    ,  spy(setoid_tran (setPi singleton x\(setPi singleton y\(propEq singleton x y) ) )  _), makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\(setPi (propEq singleton star star) x\singleton ) )  _), makeline
    ,  spy(setoid_refl (setPi (setPi (propEq singleton star star) x\singleton) x\(setPi (propEq singleton star star) x\singleton)) _), makeline
    .


notquicktest 
    :- makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test m A B C), makeline %This one takes a lot of time
    ,  spy(sigma A\ sigma B\ sigma C\ test l A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test f A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test g A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test h A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test i A B C), makeline
    ,  spy(sigma O\ test n O), makeline
    ,  quicktest
    .

test n O
    :- (T = 
        setPi (setPi (setPi singleton _\singleton) _\singleton) f\
        (propEq singleton (app f (lambda singleton x\ x)) star) 
        )    
    , macro_test T O
    .

test pd1 A Q Qy
 :- Long = ( forall singleton x\ forall singleton z \
      setPi (propEq singleton x z) _ \
       (setPi (setPi singleton y \ propEq singleton x y) f \
         setPi (propEq (propEq singleton x x) (app f x) (eq singleton x)) p \
          setPi (propEq (propEq singleton z z) (app f z) (eq singleton z)) q \
           propEq (propEq (propEq singleton x x) (app f x) (eq singleton x)) p q)),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test m A Q Qy
 :- Long = ( forall singleton x\
      implies (propEq singleton x star) 
      (implies (propEq singleton star x)
      (forall 
            (setPi 
                (setPi 
                    (setPi singleton y\ propEq singleton star x) _\ 
                    singleton) 
                _\singleton
            ) f\
                (propEq singleton 
                    (app f (lambda (setPi singleton y\ propEq singleton star star)
                         x\ star)) 
                    star) 
            ))
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test l A Q Qy
 :- Long = ( forall singleton x\
      implies (propEq singleton x star) 
      (implies (propEq singleton star x)
      ( forall 
            (setPi 
                (setPi singleton y\ propEq singleton star x) 
                _\singleton
            ) f\
                (propEq singleton 
                    (app f (lambda singleton x\ (eq singleton star))) 
                    star) 
            ))
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test i A B C 
 :- Long = ( forall singleton x\ forall singleton y\ 
    (implies 
        (propEq singleton x y) (implies 
        (propEq singleton y x) (implies 
        (propEq singleton x star) (implies 
        (propEq singleton y star) (implies 
        (propEq singleton star x) (implies 
        (propEq singleton star y) (
            forall 
                (setPi (propEq singleton x star) d\ 
                    setPi (propEq singleton x x) h\
                        (propEq
                            (propEq singleton x star)
                                d
                                h
                            )) f\
                propEq
                    (propEq
                        (propEq singleton star star)
                            (eq singleton y)
                            (eq singleton x))
                    (app 
                        (app f (eq singleton y))
                        (eq singleton x))
                    (app 
                        (app f (eq singleton x))
                        (eq singleton x))
            )
        )))))))     
    ,
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long B),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType B C int)
    .




test h A Q Qy
 :- Long = (
        forall (setPi (setPi singleton _\singleton) _\singleton) f\
        (propEq singleton (app f (lambda singleton x\ x)) star) 
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test g A Q Qy
 :- Long = (
        forall singleton x\
        forall (setPi singleton _\singleton) g\
        forall (setPi (propEq singleton (app g x) (app g star)) _\singleton) f\
        (implies (propEq singleton star x)
            (propEq singleton 
                    (app f (eq singleton (app g star))) 
                    (app f (eq singleton (app g star))) 
            )
        )
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .




test f A Q Qy
 :- Long = (
        forall singleton x\
        forall (setPi (propEq singleton x star) _\singleton) f\
        ( implies (propEq singleton star x)
            (propEq singleton 
                    (app f (eq singleton star)) 
                    (app f (eq singleton star)) 
            )
        )
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test p A B C
  :- Long = 
(forall 
  singleton x\
  (implies (propEq singleton x star) (implies (propEq singleton star x) 
      (forall 
        (setPi 
          (propEq 
            singleton star x) y\
          (setPi 
            (propEq (propEq singleton star star) y (eq singleton star)) _\
            singleton)) f\   
        (propEq singleton 
        (app 
            (app f (eq singleton star))
            (eq (propEq singleton star star) 
            (eq singleton star)
            )) 
        star)
            )  ))
    )
    , spy(ofType Long A ext)
    , spy(interp Long B)
    , spy(ofType B C int)
    .
			     
test q A B C
  :- Long = 
(forall 
  (propEq singleton star star) x\
  (implies (propEq (propEq singleton star star) x (eq singleton star)) (implies (propEq (propEq singleton star star) (eq singleton star) x) 
      (forall 
        (setPi 
          (propEq 
            (propEq singleton star star) (eq singleton star) x) y\
          (setPi 
            (propEq (propEq (propEq singleton star star) (eq singleton star) (eq singleton star)) y (eq (propEq singleton star star) (eq singleton star))) _\
            (propEq singleton star star))) f\   
        (propEq (propEq singleton star star) 
        (app 
            (app f (eq (propEq singleton star star) (eq singleton star)))
            (eq (propEq (propEq singleton star star) (eq singleton star) (eq singleton star)) 
            (eq (propEq singleton star star) (eq singleton star))
            )) 
        (eq singleton star))
            )  ))
    )
    , spy(ofType Long A ext)
    , spy(interp Long B)
    , spy(ofType B C int)
    .

%%% SETSIGMA TESTS %%%

%% Using interp pair, setoid_eq. No type mismatches, simple interpretation and typing of sigma-terms.
test s1 A Q Ai
 :- Long = (forall singleton x\
    	   (propEq (setSigma singleton x\singleton)
	   	   (pair singleton (x\singleton) star star)
		   (pair singleton (x\singleton) star star))),
    spy (ofType Long A ext),
    spy (interp Long Q),
    spy (ofType Q Ai int)
   .
   
%% same as s1, slightly more elaborate.
test s2 A Q Ai
     :- Long = (forall singleton x\
     	       	  (implies (propEq singleton x star) (implies (propEq singleton star x)
		     (propEq singleton
		     	     star
			     (app (lambda (setSigma singleton x\singleton) _\star)
			     	  (pair singleton (x\singleton) star star)))))),
	ofType Long A ext,
	print "END OF TYPING",
	interp Long Q,
	print "END OF TRANSLATION",
	ofType Q Ai int
    .

%% Using tau and setoid_eq. The version with setoid_refl terminates successfully. Type mismatch in the type B of (setSigma B C).
test s3 A Q Ai
     :- Long = (forall singleton x\
     	          (implies (propEq singleton x star) (implies (propEq singleton star x)
		     (propEq singleton
		     	     star
			     (app (lambda (setSigma (propEq singleton x star) x\singleton)
			     	 	 x\star)
			     	 (pair (propEq singleton star star) (x\singleton)
				       (eq singleton star) star)))))),
        ofType Long A ext,
	interp Long Q,
	ofType Q Ai int
     .

%% Using tau. Here the type mismatch is in the type C of (setSigma B C), which is not really dependent in this case.
test s4 A Q Ai
     :- Long = (forall singleton x\
     	       	  (implies (propEq singleton x star) (implies (propEq singleton star x)
		     (propEq singleton
		     	     star
			     (app (lambda (setSigma singleton z\(propEq singleton x star))
			     	  	  	    	      			    	   
			     	  	  z\star)
			           (pair singleton (x\propEq singleton star star)
				   	 star (eq singleton star))))))),
	ofType Long A ext,
	interp Long Q,
	ofType Q Ai int
     .

%% Using tau and setoid_eq. NOTE: this is almost useless, because of the way equalities of equalities are interpreted
test s5 A Q Ai
     :- Long = (forall singleton x\
     	   (implies (propEq singleton x star) (implies (propEq singleton star x)
	      (propEq singleton
	      	      star
		      (app (lambda (setSigma (propEq singleton x star) p\
		      	      propEq (propEq singleton star star)
			   	     p
				     (eq singleton star))
			    z\ star)
		      (pair (propEq singleton star star)
		      	    (p\ propEq (propEq singleton star star)
			   	       p
				       (eq singleton x))
		            (eq singleton star)						 
			    (eq (propEq singleton star star) (eq singleton star)))))))), 
			    			       	     	 	   		
	ofType Long A ext,
	interp Long Q,
	ofType Q Ai int
     .

test s6 A Q Ai
     :- Long = (forall singleton x\
     	   (implies (propEq singleton x star) (implies (propEq singleton star x)
	      (propEq singleton
	      	      star
		      (app (lambda (setSigma (setPi (propEq singleton x star) _ \ singleton) p\
		      	      propEq (setPi (propEq singleton star star) _ \ singleton)
			   	     p
				     p)
			    z\ star)
		      (pair (setPi (propEq singleton star star) _ \ singleton)
		      	    (p\ propEq (setPi (propEq singleton star star) _ \singleton) p p)
		            (lambda (propEq singleton star star) _ \ star)
			    (eq (setPi (propEq singleton star star) _ \singleton) (lambda (propEq singleton star star) _ \ star)))))))),
			    			       	     	 	   		
	(ofType Long A ext),
	print "CSC2",
	(interp Long Q),
	print "CSC3",
	print "test s6:" A Q, 
	(ofType Q Ai int)
     .

%% uses setoid_refl, prop_eq functions (prop_eq not yet implemented)
test s7 A Q :-
     Long = (forall singleton x\
     	(implies (propEq singleton x star) (implies (propEq singleton star x)
     	   (propEq singleton
	   	   star
		   (app (lambda (propEq (setSigma singleton x\singleton)
		   			(pair singleton (_\singleton) x star)
					(pair singleton (_\singleton) star x))
				z\ star)
			(eq (setSigma singleton x\singleton) (pair singleton (_\singleton) star star))))))),
     ofType Long A ext,
     interp Long Q
    .

test s8 A Q:-
     Long = (forall singleton x\
     	       (implies (propEq singleton x star) (implies (propEq singleton star x)
	       	  (propEq singleton
		  	  star
			  (app (lambda (setSigma singleton _\singleton) z\star)
			       (elim_setSigma (pair singleton (_\ (setSigma singleton _\singleton))
			       		     	    star (pair singleton (_\singleton) star star))
					     (p\ (setSigma singleton _\singleton))
					     (x\ y\ y))))))),
	     ofType Long A ext,
	     print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||",
	     interp Long Q

    .
     	  
setSigma_test :-
	      print "||||||||||START S1|||||||||||\n",
	      test s1 _A1 _Q1 _Ai1,
	      print "||||||||||START S2||||||||||\n",
	      test s2 _A2 _Q2 _Ai2,
	      print "||||||||||START S3||||||||||\n",
	      test s3 _A3 _Q3 _Ai3,
	      print "||||||||||START S4||||||||||\n",
	      test s4 _A4 _Q4 _Ai4,
	      print "||||||||||START S5||||||||||\n",
	      test s5 _A5 _Q5 _Ai5,
	      print "||||||||||START S6||||||||||\n",
	      test s6 A6 Q6 Ai6,
	      print ["test s6:", A6, Q6, Ai6 ]
     .

testLib P :-
 in_library (setoid_eq (setSigma singleton x \ singleton) P).

testLib2 P :-
 in_library (setoid_eq (setSigma singleton y \ setSigma singleton x \ propEq singleton x y) P).

testLib3 P TY :-
 in_library ( % debug =>
  (spy (new_interp_type (setSigma singleton x \ singleton) P),
   spy (of P TY int))).

testLib4 P TY :-
 in_library ( % debug =>
  (spy (new_interp_type (setSigma (setSigma singleton x \ singleton) f \ singleton) P),
   spy (of P TY int))).

testLib5 P TY :-
 in_library ( % debug =>
  (spy (new_interp_type (setSigma singleton x \ setSigma singleton y \ singleton) P),
   spy (of P TY int)
  )).

testLib6 P _TY :-
 in_library ( debug =>
  (spy (new_interp_type (setSigma singleton x \ setSigma singleton y \ propEq singleton x y) P),
  true %spy (of P TY int)
  )).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                   ESTRAZIONE                                   %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type bool_t mttType.
type bool_e mttTerm.
type true_bool mttTerm.
type false_bool mttTerm.

ofType bool_t props IE_.
of bool_e bool_t IE_.
of true_bool bool_t IE_.
of false_bool bool_t IE_.

type col_t mttType.
type col_e mttTerm.

ofType col_t col IE_.
of col_e col_t IE_.

type propc_t mttType.
type propc_e mttTerm.

ofType propc_t propc IE_.
of propc_e propc_t IE_.

typecheckExtr X Type :- testExtr X Result, debug => spy(of Result Type int).

testStEx X A :- testExtr X Term, debug => spy(extract_set_ops Term Result SetList), concat [[Result], SetList] A.
typecheckStExList [SH|STL] [RH|RTL] :- of SH RH int, typecheckStExList STL RTL, !.
typecheckStExList [] [].
typecheckStEx X Type :- testStEx X Result, debug => typecheckStExList Result Type.

testExtr 1 A :- debug => starify_nonset_ops (id (propId bool_t true_bool true_bool) (id bool_t true_bool)) A.
testExtr 2 A :- debug => starify_nonset_ops (id (propId singleton star star) (id singleton star)) A.
testExtr 3 A :- debug => starify_nonset_ops (app (lambda bool_t x\x) true_bool) A.
testExtr 4 A :- debug => starify_nonset_ops (pair bool_t (_\bool_t) false_bool true_bool) A.
testExtr 5 A :- debug => starify_nonset_ops (pair singleton (_\singleton) star star) A.
testExtr 6 A :- debug => starify_nonset_ops (pair bool_t (x\propId bool_t x x) true_bool (id bool_t true_bool)) A.
testExtr 7 A :- debug => starify_nonset_ops (pair singleton (x\propId singleton x x) star (id singleton star)) A.
testExtr 8 A :- debug => starify_nonset_ops (app (lambda singleton x\x) star) A.
testExtr 9 A :- debug => starify_nonset_ops (app (lambda singleton (x\ id singleton x)) star) A.
testExtr 10 A :- debug => starify_nonset_ops (app (lambda bool_t (x\ id bool_t x)) true_bool) A.
testExtr 11 A :- debug => starify_nonset_ops (elim_id (id singleton star) (x\ y\ propId singleton x y) (x\ id singleton x)) A.
testExtr 12 A :- debug => starify_nonset_ops (elim_id (id bool_t true_bool) (x\ y\ propId bool_t x y) (x\ id bool_t x)) A.
testExtr 13 A :- debug => starify_nonset_ops (elim_id (id bool_t true_bool) (x\ y\ implies bool_t bool_t) (x\ impl_lam bool_t (_\x))) A.
testExtr 14 A :- debug => starify_nonset_ops (elim_singleton star (x\ singleton) star) A.
testExtr 15 A :- debug => starify_nonset_ops (p1 (pair singleton (x\ bool_t) star bool_e)) A.
testExtr 16 A :- debug => starify_nonset_ops (p2 (pair bool_t (x\ singleton) bool_e star)) A.
testExtr 17 A :- debug => starify_nonset_ops (elim_setSum (x\setSum singleton bool_t) (inl singleton bool_t star) (l\ inl singleton bool_t l) (r\ inr singleton bool_t r)) A.
testExtr 18 A :- debug => starify_nonset_ops (elim_setSum (x\setSum bool_t bool_t) (inl bool_t bool_t true_bool) (l\ inl bool_t bool_t l) (r\ inr bool_t bool_t r)) A.
testExtr 19 A :- debug => starify_nonset_ops (elim_setSum (x\setSum singleton singleton) (inl singleton singleton star) (l\ inl singleton singleton l) (r\ inr singleton singleton r)) A.
testExtr 20 A :- debug => starify_nonset_ops (elim_setSum (x\setSum singleton (implies bool_t bool_t)) (inl singleton (implies bool_t bool_t) star) (l\ inl singleton (implies bool_t bool_t) l) (r\ inr singleton (implies bool_t bool_t) r)) A.
testExtr 21 A :- debug => starify_nonset_ops
(
	elim_setSum (x\ propId (setSum singleton bool_t) x x) (inl singleton bool_t star)
		(l\ id (setSum singleton bool_t) (inl singleton bool_t l))
		(r\ id (setSum singleton bool_t) (inr singleton bool_t r))
) A.
testExtr 22 A :- debug => starify_nonset_ops (elim_setSigma (pair singleton (_\bool_t) star bool_e) (x\singleton) (l\r\ l)) A.
testExtr 23 A :- debug => starify_nonset_ops (elim_setSigma (pair singleton (_\bool_t) star true_bool) (x\bool_t) (l\r\ r)) A.
testExtr 24 A :- debug => starify_nonset_ops (elim_setSigma (pair singleton (_\bool_t) star true_bool) (x\singleton) (l\r\ l)) A.
testExtr 25 A :- debug => starify_nonset_ops (elim_setSigma (pair bool_t (_\bool_t) true_bool bool_e) (x\bool_t) (l\r\ l)) A.
testExtr 26 A :- debug => starify_nonset_ops (pair singleton (x\propId bool_t true_bool true_bool) star (id bool_t true_bool)) A.
testExtr 27 A :- debug => starify_nonset_ops (app
    (lambda
        (setSigma (propId bool_t true_bool true_bool) (_\singleton))
        (x\ id (setSigma (propId bool_t true_bool true_bool) (_\singleton)) x))
    (pair (propId bool_t true_bool true_bool) (_\singleton) (id bool_t true_bool) star)
) A.
testExtr 28 A :- debug => starify_nonset_ops (app
    (lambda
        (setSigma (setSigma bool_t (_\bool_t)) (_\singleton))
        (x\ id (setSigma (setSigma bool_t (_\bool_t)) (_\singleton)) x))
    (pair (setSigma bool_t (_\bool_t)) (_\singleton)
        (pair bool_t (_\bool_t) true_bool false_bool)
        star)
) A.
testExtr 29 A :- debug => starify_nonset_ops (app
	(lambda (setSigma singleton (_\setSigma bool_t (_\bool_t)))
		(x\ id (setSigma singleton (_\setSigma bool_t (_\bool_t))) x)
	)
	(pair singleton (_\setSigma bool_t (_\bool_t))
		star (pair bool_t (_\bool_t) true_bool false_bool))
) A.
testExtr 30 A :- debug => starify_nonset_ops (app
	(lambda (setSigma singleton (_\bool_t))
		(x\ id (setSigma singleton (_\bool_t)) x)
	)
	(pair singleton (_\bool_t) star bool_e)
) A.
testExtr 31 A :- debug => starify_nonset_ops
(app
	(lambda (setSigma bool_t (_\setSigma singleton (_\bool_t)))
		(x\ id (setSigma bool_t (_\setSigma singleton (_\bool_t))) x)
	)
	(pair bool_t (_\setSigma singleton (_\bool_t))
		true_bool (pair singleton (_\bool_t) star bool_e))
) A.
testExtr 32 A :- debug => starify_nonset_ops
(app
	(lambda (setSigma singleton (_\setSigma bool_t (_\col_t)))
		(x\ id (setSigma singleton (_\setSigma bool_t (_\col_t))) x)
	)
	(pair singleton (_\setSigma bool_t (_\col_t))
		star (pair bool_t (_\col_t) true_bool col_e))
) A.
testExtr 33 A :- debug => starify_nonset_ops
(app
	(lambda (setSigma singleton (_\setSigma singleton (_\bool_t)))
		(x\ id (setSigma singleton (_\setSigma singleton (_\bool_t))) x)
	)
	(pair singleton (_\setSigma singleton (_\bool_t))
		star (pair singleton (_\bool_t) star bool_e))
) A.
testExtr 34 A :- debug => starify_nonset_ops
(app
	(p1 (pair 
		(setPi (setSigma singleton (_\bool_t)) (x\setSigma singleton (_\bool_t)))
		(_\bool_t)
		(lambda (setSigma singleton (_\bool_t)) (x\ x))
		true_bool
	))
	(pair singleton (_\bool_t) star bool_e)
) A.
testExtr 35 A :- debug => starify_nonset_ops
(app
	(p1 (pair 
		(setPi (setSigma singleton (_\bool_t)) (x\setSigma singleton (_\bool_t)))
		(_\singleton)
		(lambda (setSigma singleton (_\bool_t)) (x\ x))
		star
	))
	(pair singleton (_\bool_t) star bool_e)
) A.
testExtr 36 A :- debug => starify_nonset_ops (pair_exist singleton (_\propc_t) star propc_e) A.
testExtr 37 A :- debug => starify_nonset_ops (pair_exist singleton (_\bool_t) star true_bool) A.
testExtr 38 A :- debug => starify_nonset_ops (forall_app (forall_lam singleton (x\propc_e)) star) A.
testExtr 39 A :- debug => starify_nonset_ops (forall_app (forall_lam singleton (x\true_bool)) star) A.
testExtr 40 A :- debug => starify_nonset_ops (app (lambda singleton (x\propc_e)) star) A.
testExtr 41 A :- debug => starify_nonset_ops (app (lambda singleton (x\true_bool)) star) A.
testExtr 42 A :- debug => starify_nonset_ops (pair (exist singleton (_\propc_t)) (_\singleton)(pair_exist singleton (_\propc_t) star propc_e) star) A.
testExtr 43 A :- debug => starify_nonset_ops (pair (forall singleton (x\propc_t)) (_\singleton)(forall_lam singleton (x\propc_e)) star) A.
testExtr 44 A :- debug => starify_nonset_ops (elim_id (id singleton star) (x\ y\ exist singleton (x\propc_t)) (x\ pair_exist singleton (x\propc_t) x propc_e)) A.
testExtr 45 A :- debug => starify_nonset_ops (elim_setSigma (pair bool_t (_\bool_t) bool_e bool_e) (x\singleton) (l\r\ star)) A.
testExtr 46 A :- debug => starify_nonset_ops (elim_setSigma (pair singleton (_\singleton) star star) (x\bool_t) (l\r\ bool_e)) A.
testExtr 47 A :- debug => starify_nonset_ops (app
	(lambda (setPi singleton (x\ setSigma singleton (_\singleton))) (y\ app y star))
	(lambda singleton (x\ pair singleton (_\singleton) x x))
) A.
testExtr 48 A :- debug => starify_nonset_ops (app
	(lambda (setPi singleton (x\singleton)) (y\ app y star))
	(lambda singleton (x\x))
) A.
testExtr 49 A :- debug => starify_nonset_ops (app
	(lambda (setPi bool_t (x\ setSigma (propId bool_t x x) (_\singleton)))
		(y\ id (setSigma (propId bool_t true_bool true_bool) (_\singleton)) (app y true_bool))
	)
	(lambda bool_t
		(x\ pair (propId bool_t x x) (_\singleton) (id bool_t x) star)
	)
) A.


