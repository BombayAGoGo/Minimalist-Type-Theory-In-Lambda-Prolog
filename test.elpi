accumulate debug.

accumulate main.

accumulate calc/and.
accumulate calc/propEq.
accumulate calc/forall.
accumulate calc/exist.
accumulate calc/propId.
accumulate calc/implies.
%accumulate calc/letIn.
accumulate calc/or.
accumulate calc/setSum.
accumulate calc/singleton.
accumulate calc/setPi.
accumulate calc/setSigma.

type m,l,f,g,h,i,n A.
type s1,s2,s3,s4,s5,s6,s7,s8 A.
type pd1 A.
type test A.

main :- nodebug => notquicktest.

sigmaTest :- nodebug => setSigma_test.

macro_test I O 
    :- nodebug => spy(ofType I _Te ext)
    ,  spy(interp I O)
    ,  spy(ofType O _Ti int)
    .

quicktest 
    :- makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\singleton )  _), makeline
    ,  spy(setoid_tran (setPi singleton x\singleton )  _), makeline
    ,  spy(setoid_tran (setPi (setPi singleton x\singleton ) x\(setPi singleton x\singleton ) )  _), makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\propEq singleton star star )  _),  makeline
    ,  spy(sigma P\ setoid_tran singleton P), makeline
    ,  spy(setoid_refl (setPi (propEq singleton star star) x\singleton) _), makeline
    ,  spy(setoid_refl (setPi (setPi singleton _\singleton) x\singleton) _), makeline
    ,  spy(setoid_symm (setPi singleton x\singleton)  _), makeline
    ,  spy(setoid_symm (setPi (setPi singleton x\singleton) x\singleton)  _), makeline
    ,  spy(setoid_symm (setPi (setPi (setPi singleton x\singleton) x\(setPi singleton x\singleton)) x\(setPi singleton x\singleton))  _), makeline
    ,  spy(setoid_tran 
    (setPi (setPi singleton x\(propEq singleton x star) ) 
        x\(setPi (setPi singleton x\singleton ) x\(setPi singleton x\singleton ) ) )  _), makeline
    ,  spy(setoid_tran (setPi singleton x\(setPi singleton y\(propEq singleton x y) ) )  _), makeline
    ,  spy(setoid_tran (setPi (propEq singleton star star) x\(setPi (propEq singleton star star) x\singleton ) )  _), makeline
    ,  spy(setoid_refl (setPi (setPi (propEq singleton star star) x\singleton) x\(setPi (propEq singleton star star) x\singleton)) _), makeline
    .

notquicktest 
    :- makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test m A B C), makeline %This one takes a lot of time
    ,  spy(sigma A\ sigma B\ sigma C\ test l A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test f A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test g A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test h A B C), makeline
    ,  spy(sigma A\ sigma B\ sigma C\ test i A B C), makeline
    ,  spy(sigma O\ test n O), makeline
    ,  quicktest
    .

test n O
    :- (T = 
        setPi (setPi (setPi singleton _\singleton) _\singleton) f\
        (propEq singleton (app f (lambda singleton x\ x)) star) 
        )    
    , macro_test T O
    .

test pd1 A Q Qy
 :- Long = ( forall singleton x\ forall singleton z \
      setPi (propEq singleton x z) _ \
       (setPi (setPi singleton y \ propEq singleton x y) f \
         setPi (propEq (propEq singleton x x) (app f x) (eq singleton x)) p \
          setPi (propEq (propEq singleton z z) (app f z) (eq singleton z)) q \
           propEq (propEq (propEq singleton x x) (app f x) (eq singleton x)) p q)),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test m A Q Qy
 :- Long = ( forall singleton x\
      implies (propEq singleton x star) 
      (implies (propEq singleton star x)
      (forall 
            (setPi 
                (setPi 
                    (setPi singleton y\ propEq singleton star x) _\ 
                    singleton) 
                _\singleton
            ) f\
                (propEq singleton 
                    (app f (lambda (setPi singleton y\ propEq singleton star star)
                         x\ star)) 
                    star) 
            ))
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test l A Q Qy
 :- Long = ( forall singleton x\
      implies (propEq singleton x star) 
      (implies (propEq singleton star x)
      ( forall 
            (setPi 
                (setPi singleton y\ propEq singleton star x) 
                _\singleton
            ) f\
                (propEq singleton 
                    (app f (lambda singleton x\ (eq singleton star))) 
                    star) 
            ))
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test i A B C 
 :- Long = ( forall singleton x\ forall singleton y\ 
    (implies 
        (propEq singleton x y) (implies 
        (propEq singleton y x) (implies 
        (propEq singleton x star) (implies 
        (propEq singleton y star) (implies 
        (propEq singleton star x) (implies 
        (propEq singleton star y) (
            forall 
                (setPi (propEq singleton x star) d\ 
                    setPi (propEq singleton x x) h\
                        (propEq
                            (propEq singleton x star)
                                d
                                h
                            )) f\
                propEq
                    (propEq
                        (propEq singleton star star)
                            (eq singleton y)
                            (eq singleton x))
                    (app 
                        (app f (eq singleton y))
                        (eq singleton x))
                    (app 
                        (app f (eq singleton x))
                        (eq singleton x))
            )
        )))))))     
    ,
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long B),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType B C int)
    .




test h A Q Qy
 :- Long = (
        forall (setPi (setPi singleton _\singleton) _\singleton) f\
        (propEq singleton (app f (lambda singleton x\ x)) star) 
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

test g A Q Qy
 :- Long = (
        forall singleton x\
        forall (setPi singleton _\singleton) g\
        forall (setPi (propEq singleton (app g x) (app g star)) _\singleton) f\
        (implies (propEq singleton star x)
            (propEq singleton 
                    (app f (eq singleton (app g star))) 
                    (app f (eq singleton (app g star))) 
            )
        )
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .




test f A Q Qy
 :- Long = (
        forall singleton x\
        forall (setPi (propEq singleton x star) _\singleton) f\
        ( implies (propEq singleton star x)
            (propEq singleton 
                    (app f (eq singleton star)) 
                    (app f (eq singleton star)) 
            )
        )
        ),
    spy(ofType Long A ext),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(interp Long Q),
    %print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
    spy(ofType Q Qy int)
    .

testZ A B C
  :- Long = 
(forall 
  singleton x\
  (implies (propEq singleton x star) (implies (propEq singleton star x) 
      (forall 
        (setPi 
          (propEq 
            singleton star x) y\
          (setPi 
            (propEq (propEq singleton star star) y (eq singleton star)) _\
            singleton)) f\   
        (propEq singleton 
        (app 
            (app f (eq singleton star))
            (eq (propEq singleton star star) 
            (eq singleton star)
            )) 
        star)
            )  ))
    )
    , spy(ofType Long A ext)
    , spy(interp Long B)
    , spy(ofType B C int)
    .
			     
testE A B C
  :- Long = 
(forall 
  (propEq singleton star star) x\
  (implies (propEq (propEq singleton star star) x (eq singleton star)) (implies (propEq (propEq singleton star star) (eq singleton star) x) 
      (forall 
        (setPi 
          (propEq 
            (propEq singleton star star) (eq singleton star) x) y\
          (setPi 
            (propEq (propEq (propEq singleton star star) (eq singleton star) (eq singleton star)) y (eq (propEq singleton star star) (eq singleton star))) _\
            (propEq singleton star star))) f\   
        (propEq (propEq singleton star star) 
        (app 
            (app f (eq (propEq singleton star star) (eq singleton star)))
            (eq (propEq (propEq singleton star star) (eq singleton star) (eq singleton star)) 
            (eq (propEq singleton star star) (eq singleton star))
            )) 
        (eq singleton star))
            )  ))
    )
    , spy(ofType Long A ext)
    , spy(interp Long B)
    , spy(ofType B C int)
    .

%%% SETSIGMA TESTS %%%

%% Using interp pair, setoid_eq. No type mismatches, simple interpretation and typing of sigma-terms.
test s1 A Q Ai
 :- Long = (forall singleton x\
    	   (propEq (setSigma singleton x\singleton)
	   	   (pair singleton (x\singleton) star star)
		   (pair singleton (x\singleton) star star))),
    spy (ofType Long A ext),
    spy (interp Long Q),
    spy (ofType Q Ai int)
   .
   
%% same as s1, slightly more elaborate.
test s2 A Q Ai
     :- Long = (forall singleton x\
     	       	  (implies (propEq singleton x star) (implies (propEq singleton star x)
		     (propEq singleton
		     	     star
			     (app (lambda (setSigma singleton x\singleton) _\star)
			     	  (pair singleton (x\singleton) star star)))))),
	ofType Long A ext,
	print "END OF TYPING",
	interp Long Q,
	print "END OF TRANSLATION",
	ofType Q Ai int
    .

%% Using tau and setoid_eq. The version with setoid_refl terminates successfully. Type mismatch in the type B of (setSigma B C).
test s3 A Q Ai
     :- Long = (forall singleton x\
     	          (implies (propEq singleton x star) (implies (propEq singleton star x)
		     (propEq singleton
		     	     star
			     (app (lambda (setSigma (propEq singleton x star) x\singleton)
			     	 	 x\star)
			     	 (pair (propEq singleton star star) (x\singleton)
				       (eq singleton star) star)))))),
        ofType Long A ext,
	interp Long Q,
	ofType Q Ai int
     .

%% Using tau. Here the type mismatch is in the type C of (setSigma B C), which is not really dependent in this case.
test s4 A Q Ai
     :- Long = (forall singleton x\
     	       	  (implies (propEq singleton x star) (implies (propEq singleton star x)
		     (propEq singleton
		     	     star
			     (app (lambda (setSigma singleton z\(propEq singleton x star))
			     	  	  	    	      			    	   
			     	  	  z\star)
			           (pair singleton (x\propEq singleton star star)
				   	 star (eq singleton star))))))),
	ofType Long A ext,
	interp Long Q,
	ofType Q Ai int
     .

%% Using tau and setoid_eq. NOTE: this is almost useless, because of the way equalities of equalities are interpreted
test s5 A Q Ai
     :- Long = (forall singleton x\
     	   (implies (propEq singleton x star) (implies (propEq singleton star x)
	      (propEq singleton
	      	      star
		      (app (lambda (setSigma (propEq singleton x star) p\
		      	      propEq (propEq singleton star star)
			   	     p
				     (eq singleton star))
			    z\ star)
		      (pair (propEq singleton star star)
		      	    (p\ propEq (propEq singleton star star)
			   	       p
				       (eq singleton x))
		            (eq singleton star)						 
			    (eq (propEq singleton star star) (eq singleton star)))))))), 
			    			       	     	 	   		
	ofType Long A ext,
	interp Long Q,
	ofType Q Ai int
     .

test s6 A Q Ai
     :- Long = (forall singleton x\
     	   (implies (propEq singleton x star) (implies (propEq singleton star x)
	      (propEq singleton
	      	      star
		      (app (lambda (setSigma (setPi (propEq singleton x star) _ \ singleton) p\
		      	      propEq (setPi (propEq singleton star star) _ \ singleton)
			   	     p
				     p)
			    z\ star)
		      (pair (setPi (propEq singleton star star) _ \ singleton)
		      	    (p\ propEq (setPi (propEq singleton star star) _ \singleton) p p)
		            (lambda (propEq singleton star star) _ \ star)
			    (eq (setPi (propEq singleton star star) _ \singleton) (lambda (propEq singleton star star) _ \ star)))))))),
			    			       	     	 	   		
	nodebug => (ofType Long A ext),
	print "CSC2",
	nodebug => (interp Long Q),
	print "CSC3",
	print ["test s6:", A, Q], 
	nodebug => (ofType Q Ai int)
     .

%% uses setoid_refl, prop_eq functions (prop_eq not yet implemented)
test s7 A Q :-
     Long = (forall singleton x\
     	(implies (propEq singleton x star) (implies (propEq singleton star x)
     	   (propEq singleton
	   	   star
		   (app (lambda (propEq (setSigma singleton x\singleton)
		   			(pair singleton (_\singleton) x star)
					(pair singleton (_\singleton) star x))
				z\ star)
			(eq (setSigma singleton x\singleton) (pair singleton (_\singleton) star star))))))),
     ofType Long A ext,
     interp Long Q
    .

test s8 A Q:-
     Long = (forall singleton x\
     	       (implies (propEq singleton x star) (implies (propEq singleton star x)
	       	  (propEq singleton
		  	  star
			  (app (lambda (setSigma singleton _\singleton) z\star)
			       (elim_setSigma (pair singleton (_\ (setSigma singleton _\singleton))
			       		     	    star (pair singleton (_\singleton) star star))
					     (p\ (setSigma singleton _\singleton))
					     (x\ y\ y))))))),
	     ofType Long A ext,
	     print "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||",
	     interp Long Q

    .
     	  
setSigma_test :-
	      print "||||||||||START S1|||||||||||\n",
	      test s1 _A1 _Q1 _Ai1,
	      print "||||||||||START S2||||||||||\n",
	      test s2 _A2 _Q2 _Ai2,
	      print "||||||||||START S3||||||||||\n",
	      test s3 _A3 _Q3 _Ai3,
	      print "||||||||||START S4||||||||||\n",
	      test s4 _A4 _Q4 _Ai4,
	      print "||||||||||START S5||||||||||\n",
	      test s5 _A5 _Q5 _Ai5,
	      print "||||||||||START S6||||||||||\n",
	      test s6 A6 Q6 Ai6,
	      print ["test s6:", A6, Q6, Ai6 ]
     .

testLib P :-
 in_library (setoid_eq (setSigma singleton x \ singleton) P).

testLib2 P :-
 in_library (setoid_eq (setSigma singleton y \ setSigma singleton x \ propEq singleton x y) P).

testLib3 P TY :-
 in_library (
  new_interp_type (setSigma singleton x \ singleton) P,
  of P TY int
 ).
